{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/map-generator/index.js",
    "src/map-generator/object/character.js",
    "src/map-generator/object/constants.js",
    "src/map-generator/object/corridor.js",
    "src/map-generator/object/corridorSprite.js",
    "src/map-generator/object/dungeon.js",
    "src/map-generator/object/room.js",
    "src/map-generator/object/roomSprite.js",
    "src/map-generator/object/utils.js",
    "src/map-generator/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass MapGenerator extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.transparent = true;\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew MapGenerator();\n",
    "class Character extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    game.physics.arcade.enable(this);\n    this.scale.setTo(0.25, 0.25);\n    //this.scale.setTo(0.5, 0.5);\n    this.cursors = game.input.keyboard.createCursorKeys();\n    //this.body.gravity.y = 600;\n  }\n\n  update() {\n    this.body.velocity.x = 0;\n    this.body.velocity.y = 0;\n\n    if (this.cursors.left.isDown)\n    {\n        this.body.velocity.x = -200;\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.body.velocity.x = 200;\n    }\n\n    if (this.cursors.up.isDown)\n    {\n        this.body.velocity.y = -200;\n    }\n    else if (this.cursors.down.isDown) {\n        this.body.velocity.y = 200;\n    }\n  }\n}\n\nexport default Character;",
    "export const Color = \"#473B3B\";\nexport const WallSize = 16;",
    "import CorridorSprite from './corridorSprite';\nimport {WallSize} from './constants';\n\nconst Directions = [\"vertical\", \"horizontal\"];\n\nclass Corridor extends Phaser.Group {\n\n  constructor(game, parent, x, y, width, height, direction) {\n    super(game, parent, \"corridor\", true, true, Phaser.Physics.ARCADE);\n    if(!Directions.includes(direction)) {\n      console.error(`Corridor:constructor : ${direction} is a not a value possible [${Directions}]`);\n    }\n    this.addWalls(game, x, y, width, height, direction);\n  }\n\n  addWalls(game, x,y, width, height, direction) {\n    if(direction === \"vertical\") {\n      this.addVerticalWall(game, x, y, width, height);\n    } else {\n      this.addHorizontalWall(game, x, y, width, height);\n    }\n  }\n\n  addVerticalWall(game, x, y, width, height) {\n    const corridorSprite = new CorridorSprite(game, x, y, width, height);\n    for(let i = y; i < y + height; i += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, i);\n      const rightWall = this.addWall(game, x + width, i);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n    for(let j = x - WallSize; j < x + width + WallSize; j += WallSize ) {\n      const topWall = this.addWall(game, j, y - WallSize);\n      const bottomWall = this.addWall(game, j, y + height);\n      this.add(topWall);\n      this.add(bottomWall);\n    }\n    this.add(corridorSprite);\n  }\n\n  addHorizontalWall(game, x, y, width, height) {\n    const corridorSprite = new CorridorSprite(game, x, y, width, height);\n    for(let i = x; i < x + width; i += WallSize) {\n      const upWall = this.addWall(game, i, y - WallSize);\n      const bottomWall = this.addWall(game, i, y + height);\n      this.add(upWall);\n      this.add(bottomWall);\n    }\n    for(let j = y - WallSize; j < y + height + WallSize; j += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, j);\n      const rightWall = this.addWall(game, x + width, j);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n    this.add(corridorSprite);\n}\n\n  addWall(game, x, y) {\n    let wall = game.add.sprite(x, y, 'Wall');\n    wall.name = \"colissionWall\";\n    //wall.alpha = 0.2;\n    game.physics.enable(wall, Phaser.Physics.ARCADE);\n    wall.body.immovable = true;\n    return wall;\n  }\n\n  corridorSprite() {\n    const corridorSprite = this.children.find(child => child.name === \"corridorSprite\");\n    if(!corridorSprite) {\n      //to avoid undefined attribute\n      return {x: -1, y: -1, width:-1, height:-1};\n    }\n    return corridorSprite;\n  }\n\n  walls() {\n    return this.children.filter(child => child.name == \"colissionWall\");\n  }\n\n\n}\n\nexport default Corridor;",
    "import {Color} from \"./constants.js\";\n\nclass CorridorSprite extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height, color = Color) {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = Color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = { x: x + (width/2), y: y+ (height/2)};\n    this.name = \"corridorSprite\";\n  }\n\n  overlapRoom(room) {\n      if (this.x + this.width < room.x) return false; // a is left of b\n      if (this.x > room.x + room.width) return false; // a is right of b\n      if (this.y + this.height < room.y) return false; // a is above b\n      if (this.y > room.y + room.height) return false; // a is below b\n      return true; // boxes overlap\n  }\n}\n\nexport default CorridorSprite;",
    "import Room from './room';\nimport Corridor from './corridor';\nimport {isInside, modGrid} from \"./utils\";\nimport {WallSize} from './constants';\n\nconst CorridorHeight = 4 * WallSize;\nconst CorridorWidth = 4 * WallSize;\nconst MaxRoom = 10;\nconst MinRoomSize = 5 * WallSize;\nconst MaxRoomSize = 5 * WallSize;\n\nconst MapWidth = 1000;\nconst MapHeight = 1000;\n\nclass Dungeon extends Phaser.Group {\n\n  constructor(game, parent, name, addToStage, enableBody, physicsBodyType) {\n    super(game, parent, name, false, true, Phaser.Physics.ARCADE);\n    for(let i = 0; i < MaxRoom; i++) {\n      //FIX ME  the computation does not work well\n      const width = modGrid(WallSize, MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize + 1));\n      const height = modGrid(WallSize, MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize + 1));\n      const x = modGrid(WallSize, Math.random() * (MapWidth - width - 1) + 1);\n      const y = modGrid(WallSize, Math.random() * (MapHeight - height - 1) + 1);\n\n      let newRoom = new Room(game, game.world, x, y, width, height);\n      let failed = false;\n      this.children.some(child => {\n         failed = newRoom.overlapRoom(child);\n         if(failed) {\n          //exit le loop\n          return true;\n         }\n      });\n      if (!failed) {\n        // local function to carve out new room\n        this.createRoom(newRoom);\n        if(this.rooms().length > 1) {\n          const prevRoom = this.findLastRoom(newRoom);\n          const rng = Math.random() * 2;\n          if(rng >= 1) {\n            this.horizontalCorridor(game, prevRoom, newRoom);\n            this.verticalCorridor(game, prevRoom, newRoom, false);\n          } else {\n            this.verticalCorridor(game, prevRoom, newRoom);\n            this.horizontalCorridor(game, prevRoom, newRoom, false);\n          }\n        }\n      }\n    }\n    this.removeUselessWalls(game);\n  }\n\n  rooms(newRoom = null) {\n    return this.children.filter(child => {\n      return child.name === \"room\" && child != newRoom;\n    });\n  }\n\n  findLastRoom(newRoom) {\n    const rooms = this.rooms(newRoom);\n    return rooms[rooms.length - 1];\n  }\n\n  createRoom(room) {\n    this.add(room);\n  }\n\n  horizontalCorridor(game, prevRoom, newRoom, first = true) {\n    const x1 = Math.min(prevRoom.borders().center.x, newRoom.borders().center.x);\n    const x2 = Math.max(prevRoom.borders().center.x, newRoom.borders().center.x);\n    const y = first ? prevRoom.borders().center.y : newRoom.borders().center.y;\n    const width = x2 - x1;\n    const corridor = new Corridor(game, game.world, x1, y - CorridorHeight/2, width, CorridorHeight, \"horizontal\");\n    this.add(corridor);\n  }\n\n  verticalCorridor(game, prevRoom, newRoom, first = true) {\n    const y1 = Math.min(prevRoom.borders().center.y, newRoom.borders().center.y);\n    const y2 = Math.max(prevRoom.borders().center.y, newRoom.borders().center.y);\n    const x = first ? prevRoom.borders().center.x : newRoom.borders().center.x;\n    const height = y2 - y1;\n    const corridor = new Corridor(game, game.world, x - CorridorWidth/2, y1, CorridorWidth, height, \"vertical\");\n    this.add(corridor);\n  }\n\n  getInitialRoom() {\n    return this.rooms()[0];\n  }\n\n  collide(character) {\n    let collide = false;\n    this.children.forEach(child => {\n      if(child.name === \"corridor\") {\n        if(isInside(character, child.corridorSprite())) {\n          collide = true;\n        }\n      } else {\n        if(isInside(character, child)) {\n          collide = true;\n        }\n      }\n    });\n    return collide;\n  }\n\n  walls() {\n    const arrayMultipleDim = this.children.map(child => child.walls());\n    return [].concat.apply([], arrayMultipleDim);\n  }\n\n  corridors() {\n    return this.children.filter(child => child.name === \"corridor\");\n  }\n\n  corridorSprites() {\n    return this.corridors().map(child => child.corridorSprite());\n  }\n\n  roomsSprites() {\n    return this.rooms().map(child => child.roomSprite());\n  }\n\n  removeUselessWalls(game) {\n    const destroyFunction = (wall, other) => {\n      wall.kill();\n    }\n\n    this.rooms().forEach(room => {\n      game.physics.arcade.collide(room.walls(), this.corridorSprites(), destroyFunction);\n    });\n\n    this.corridors().forEach(corridor => {\n      game.physics.arcade.collide(corridor.walls(), this.roomsSprites(), destroyFunction);\n    });\n\n     this.corridors().forEach(corridor => {\n        this.corridors().forEach(corridor2 => {\n          if(corridor !== corridor2) {\n            game.physics.arcade.collide(corridor.walls(), corridor2.corridorSprite(), destroyFunction);\n          }\n        });\n     });\n  }\n\n\n}\n\nexport default Dungeon;",
    "import {WallSize} from './constants';\nimport RoomSprite from './roomSprite';\n\nclass Room extends Phaser.Group {\n\n  constructor(game, parent, x, y, width, height) {\n    super(game, parent, \"room\", true, true, Phaser.Physics.ARCADE);\n    this.createRoom(game, x, y, width, height);\n  }\n\n  createRoom(game, x, y, width, height) {\n    const room = new RoomSprite(game, x, y, width, height);\n    this.add(room);\n    for(let i = x; i < x + width + WallSize; i += WallSize) {\n      const upWall = this.addWall(game, i, y - WallSize);\n      const downWall = this.addWall(game, i, y + height);\n      this.add(upWall);\n      this.add(downWall);\n    }\n    for(let j = y; j < y + height; j += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, j);\n      const rightWall = this.addWall(game, x + width, j);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n  }\n\n  addWall(game, x, y) {\n    let wall = game.add.sprite(x, y, 'Wall');\n    wall.name = \"RoomWall\";\n    //wall.alpha = 0.2;\n    game.physics.enable(wall, Phaser.Physics.ARCADE);\n    wall.body.immovable = true;\n    return wall;\n  }\n\n  borders() {\n    return this.roomSprite();\n  }\n\n  walls() {\n    return this.children.filter(child => child.name === \"RoomWall\");\n  }\n\n  roomSprite() {\n    return this.children.find(child => child.name === \"RoomSprite\");\n  }\n\n  overlapRoom(room) {\n    this.roomSprite().overlapRoom(room);\n  }\n\n}\n\nexport default Room;",
    "import {Color} from \"./constants.js\";\n\nclass RoomSprite extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height, color = Color) {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = {x: x + (width/2), y: y+ (height/2)};\n    this.name = \"RoomSprite\";\n  }\n\n  overlapRoom(room) {\n      if (this.x + this.width < room.x) return false; // a is left of b\n      if (this.x > room.x + room.width) return false; // a is right of b\n      if (this.y + this.height < room.y) return false; // a is above b\n      if (this.y > room.y + room.height) return false; // a is below b\n      return true; // boxes overlap\n  }\n}\n\nexport default RoomSprite;",
    "\nexport function isInside(compared, comparator) {\n  const rectCompared = {x: compared.x, y: compared.y, x2: compared.x + compared.width, y2: compared.y + compared.height};\n  const rectComparator = {x: comparator.x, y: comparator.y, x2: comparator.x + comparator.width, y2: comparator.y + comparator.height}\n\n  return rectCompared.x > rectComparator.x    &&\n         rectCompared.y > rectComparator.y    &&\n         rectCompared.x2 < rectComparator.x2  &&\n         rectCompared.y2 < rectComparator.y2\n}\n\nexport function overlap(box1, box2) {\n    if (box1.x + box1.width < box2.x) return false; // a is left of b\n    if (box1.x > box2.x + box2.width) return false; // a is right of b\n    if (box1.y + box1.height < box2.y) return false; // a is above b\n    if (box1.y > box2.y + box2.height) return false; // a is below b\n    return true; // boxes overlap\n}\n\nexport function overlapWithDifference(box1, box2) {\n  let output = {};\n  output.x = Math.max(box1.x, box2.x);\n  output.y = Math.max(box1.y, box2.y);\n  output.width = Math.min(box1.right, box2.right) - output.x;\n  output.height = Math.min(box1.bottom, box2.bottom) - output.y;\n  return [overlap(box1, box2), output];\n}\n\nexport function modGrid(modValue, value) {\n  const offset = value % modValue;\n  return value + (modValue - offset);\n}",
    "const PATH = \"res/map-generator\";\nimport Character from 'object/character';\nimport Dungeon from 'object/dungeon';\n\nimport {isInside} from \"object/utils\";\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.stage.backgroundColor = \"#4488AA\";\n    this.game.world.setBounds(0, 0, 3000, 1000);\n    this.character = new Character(this.game, 50, 200, 'Character', 0);\n    this.dungeon = new Dungeon(this.game);\n    const roomPosition = this.dungeon.getInitialRoom().borders().center;\n    this.character.position.setTo(roomPosition.x,roomPosition.y);\n    this.game.add.existing(this.character);\n    this.game.camera.follow(this.character);\n  }\n\n  update() {\n    this.game.physics.arcade.collide(this.character, this.dungeon.walls());\n  }\n\n  preload() {\n    this.game.load.image('Character', PATH + '/character.png');\n    this.game.load.image('Wall', PATH + '/wall.png');\n  }\n}\n\nexport default GameState;\n"
  ]
}