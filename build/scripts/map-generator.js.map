{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/map-generator/constants/constants.js",
    "src/map-generator/constants/keyUtils.js",
    "src/map-generator/index.js",
    "src/map-generator/lib/constants.js",
    "src/map-generator/lib/corridor.js",
    "src/map-generator/lib/corridorSprite.js",
    "src/map-generator/lib/maze.js",
    "src/map-generator/lib/room.js",
    "src/map-generator/lib/roomSprite.js",
    "src/map-generator/lib/utils.js",
    "src/map-generator/lib/wall.js",
    "src/map-generator/object/character.js",
    "src/map-generator/object/roomWithCarpet.js",
    "src/map-generator/object/roomWithColoredCorners.js",
    "src/map-generator/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import { WallSize as wallSizeOriginal } from \"../lib/constants\";\n\nexport const WallSize = wallSizeOriginal;\nexport const CarpetWidth = 40;\nexport const CarpetHeight = 40;\nexport const CornerWidth = 20;\nexport const CornerHeight = 20;\n\nexport const WorldWitdth = 1500;\nexport const WorldHeight = 1500;\n\n",
    "export const Character = \"Character\";\nexport const Corner = \"Corner\";\nexport const Carpet = \"Carpet\";\n",
    "import GameState from 'states/GameState';\n\nclass MapGenerator extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.mazeCreated = new Phaser.Signal();\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n\n  listen(Fn) {\n    this.mazeCreated.add(Fn, this);\n  }\n\n  importFromJson(JSONData)\n  {\n     this.state.start('GameState',true, false, JSONData);\n  }\n\n\n  currentState() {\n    const currentStateName = this.state.current;\n    return this.state.states[currentStateName];\n  }\n\n  getJSONData() {\n    return this.currentState().maze.exportJSON();\n  }\n}\n\nwindow.game = new MapGenerator();\n",
    "export const Color = \"#473B3B\";\nexport const WallColor = \"#395992\";\nexport const WallSize = 16;\n\nexport const Vertical = \"vertical\";\nexport const Horizontal = \"horizontal\"\nexport const Directions = [Vertical, Horizontal];\n\nexport const RoomName = \"room\";\nexport const CorridorName = \"corridor\"",
    "import CorridorSprite from './corridorSprite';\nimport {WallSize, Vertical, Horizontal, Directions, CorridorName} from './constants';\nimport Wall from \"./wall\";\n\nconst WallName = \"ColissionWall\";\nconst SpriteName = \"CorridorSprite\";\n\nclass Corridor extends Phaser.Group {\n\n  constructor(game, parent, x, y, width, height, direction) {\n    super(game, parent, CorridorName, true, true, Phaser.Physics.ARCADE);\n    if(!Directions.includes(direction)) {\n      console.error(`Corridor:constructor : ${direction} is a not a value possible [${Directions}]`);\n    }\n    this.direction = direction;\n    //width and height less the walls size\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.addWalls(game, x, y, width, height);\n  }\n\n  addWalls(game, x,y, width, height) {\n    if(this.direction === Vertical) {\n      this.addVerticalWall(game, x, y, width, height);\n    } else {\n      this.addHorizontalWall(game, x, y, width, height);\n    }\n  }\n\n  addVerticalWall(game, x, y, width, height) {\n    const corridorSprite = new CorridorSprite(game, x, y, width, height);\n    for(let i = y; i < y + height; i += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, i);\n      const rightWall = this.addWall(game, x + width, i);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n    for(let j = x - WallSize; j < x + width + WallSize; j += WallSize ) {\n      const topWall = this.addWall(game, j, y - WallSize);\n      const bottomWall = this.addWall(game, j, y + height);\n      this.add(topWall);\n      this.add(bottomWall);\n    }\n    this.add(corridorSprite);\n  }\n\n  addHorizontalWall(game, x, y, width, height) {\n    const corridorSprite = new CorridorSprite(game, x, y, width, height);\n    for(let i = x; i < x + width; i += WallSize) {\n      const upWall = this.addWall(game, i, y - WallSize);\n      const bottomWall = this.addWall(game, i, y + height);\n      this.add(upWall);\n      this.add(bottomWall);\n    }\n    for(let j = y - WallSize; j < y + height + WallSize; j += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, j);\n      const rightWall = this.addWall(game, x + width, j);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n    this.add(corridorSprite);\n}\n\n  addWall(game, x, y) {\n    let wall = new Wall(game, x, y, WallName);\n    return wall;\n  }\n\n  corridorSprite() {\n    const corridorSprite = this.children.find(child => child.name === SpriteName);\n    if(!corridorSprite) {\n      //to avoid undefined attribute\n      return {x: -1, y: -1, width:-1, height:-1};\n    }\n    return corridorSprite;\n  }\n\n  walls() {\n    return this.children.filter(child => child.name === WallName);\n  }\n\n\n}\n\nexport default Corridor;",
    "import {Color} from \"./constants.js\";\n\nclass CorridorSprite extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height, color = Color) {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = { x: x + (width/2), y: y+ (height/2)};\n    //add constant\n    this.name = \"CorridorSprite\";\n  }\n\n  overlapRoom(room) {\n      if (this.x + this.width < room.x) return false; // a is left of b\n      if (this.x > room.x + room.width) return false; // a is right of b\n      if (this.y + this.height < room.y) return false; // a is above b\n      if (this.y > room.y + room.height) return false; // a is below b\n      return true; // boxes overlap\n  }\n}\n\nexport default CorridorSprite;",
    "import Corridor from './corridor';\nimport {isInside, modGrid} from \"./utils\";\nimport {WallSize, Horizontal, Vertical, RoomName, CorridorName } from './constants';\n\nconst CorridorHeight = 4 * WallSize;\nconst CorridorWidth = 4 * WallSize;\nconst MaxRoom = 10;\n//each room shoud have the same size\nconst MinRoomSize = 5 * WallSize;\nconst MaxRoomSize = 5 * WallSize;\n\nclass Maze extends Phaser.Group {\n\n  constructor(game, parent, worldWitdth, worldHeight, arrayOfRoom) {\n    super(game, parent, \"maze\", false, true, Phaser.Physics.ARCADE);\n    this.worldWitdth = worldWitdth;\n    this.worldHeight = worldHeight;\n    this.arrayOfRoom = arrayOfRoom;\n  }\n\n  rooms(newRoom = null) {\n    return this.children.filter(child => {\n      return child.name === RoomName && child != newRoom;\n    });\n  }\n\n  findLastRoom(newRoom) {\n    const rooms = this.rooms(newRoom);\n    return rooms[rooms.length - 1];\n  }\n\n  createRoom(room) {\n    this.add(room);\n  }\n\n  horizontalCorridor(game, prevRoom, newRoom, first = true) {\n    const x1 = Math.min(prevRoom.borders().center.x, newRoom.borders().center.x);\n    const x2 = Math.max(prevRoom.borders().center.x, newRoom.borders().center.x);\n    const y = first ? prevRoom.borders().center.y : newRoom.borders().center.y;\n    const width = x2 - x1;\n    const corridor = new Corridor(game, game.world, x1, y - CorridorHeight/2, width, CorridorHeight, Horizontal);\n    this.add(corridor);\n  }\n\n  verticalCorridor(game, prevRoom, newRoom, first = true) {\n    const y1 = Math.min(prevRoom.borders().center.y, newRoom.borders().center.y);\n    const y2 = Math.max(prevRoom.borders().center.y, newRoom.borders().center.y);\n    const x = first ? prevRoom.borders().center.x : newRoom.borders().center.x;\n    const height = y2 - y1;\n    const corridor = new Corridor(game, game.world, x - CorridorWidth/2, y1, CorridorWidth, height, Vertical);\n    this.add(corridor);\n  }\n\n  getInitialRoom() {\n    return this.rooms()[0];\n  }\n\n  collide(character) {\n    let collide = false;\n    this.children.forEach(child => {\n      if(child.name === CorridorName) {\n        if(isInside(character, child.corridorSprite())) {\n          collide = true;\n        }\n      } else {\n        if(isInside(character, child)) {\n          collide = true;\n        }\n      }\n    });\n    return collide;\n  }\n\n  walls() {\n    const arrayMultipleDim = this.children.map(child => child.walls());\n    return [].concat.apply([], arrayMultipleDim);\n  }\n\n  corridors() {\n    return this.children.filter(child => child.name === CorridorName);\n  }\n\n  corridorSprites() {\n    return this.corridors().map(child => child.corridorSprite());\n  }\n\n  roomsSprites() {\n    return this.rooms().map(child => child.roomSprite());\n  }\n\n  removeUselessWalls(game) {\n    const destroyFunction = (wall, other) => {\n      wall.kill();\n    }\n\n    this.rooms().forEach(room => {\n      game.physics.arcade.collide(room.walls(), this.corridorSprites(), destroyFunction);\n    });\n\n    this.corridors().forEach(corridor => {\n      game.physics.arcade.collide(corridor.walls(), this.roomsSprites(), destroyFunction);\n    });\n\n     this.corridors().forEach(corridor => {\n        this.corridors().forEach(corridor2 => {\n          if(corridor !== corridor2) {\n            game.physics.arcade.collide(corridor.walls(), corridor2.corridorSprite(), destroyFunction);\n          }\n        });\n     });\n  }\n\n  addAdditionalSprite(game) {\n    this.rooms().forEach(room => {\n      room.addAdditionalSprite(game);\n    });\n  }\n\n  sortDepth() {\n    const compare = (a,b) => {\n      if(a.name === RoomName && b.name === RoomName || a.name === CorridorName &&  b.name === CorridorName) {\n        return 0;\n      }\n      else if (a.name === RoomName && b.name == CorridorName) {\n        return 1;\n      }\n      else if (a.name === CorridorName && b.name == RoomName) {\n        return -1;\n      }\n    };\n    this.children.sort(compare);\n  }\n\n  exportJSON() {\n    const roomArray = this.rooms().map(m => {return {x: m.roomSprite().x, y: m.roomSprite().y, w: m.originalWidth, h: m.originalHeight, klassName: m.constructor.name};});\n    const corridorArray = this.corridors().map(m => {return {x: m.corridorSprite().x, y: m.corridorSprite().y, w: m.originalWidth, h: m.originalHeight, direction: m.direction};});\n    return JSON.stringify({rooms: roomArray, corridors: corridorArray});\n  }\n\n  generate(game, JSONData = null) {\n    const strategyFn = JSONData === null ? this.randomGeneration.bind(this) : this.importFromJson(JSONData).bind(this);\n    this.generateLevel(game, strategyFn);\n  }\n\n  generateLevel(game, generationFunction) {\n    generationFunction(game);\n    console.log(this.exportJSON());\n    this.removeUselessWalls(game);\n    this.sortDepth();\n    this.addAdditionalSprite(game);\n  }\n\n  randomGeneration(game) {\n    for(let i = 0; i < MaxRoom; i++) {\n      //FIX ME  the computation does not work well\n      // TODO OFFSET WALLSIZE\n      const width = modGrid(WallSize, MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize));\n      const height = modGrid(WallSize, MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize));\n      //console.log(width)\n      //console.log(height)\n      const x = modGrid(WallSize, Math.random() * (this.worldWitdth - width - 1) + 1);\n      const y = modGrid(WallSize, Math.random() * (this.worldHeight - height - 1) + 1);\n\n      const indexChosen = Math.trunc(Math.random() * this.arrayOfRoom.length);\n      let newRoom = Reflect.construct(this.arrayOfRoom[indexChosen],[game, game.world, x, y, width, height]);\n      let failed = false;\n      this.children.some(child => {\n         failed = newRoom.overlapRoom(child);\n         if(failed) {\n          //exit le loop\n          return true;\n         }\n      });\n      if (!failed) {\n        // local function to carve out new room\n        this.createRoom(newRoom);\n        if(this.rooms().length > 1) {\n          const prevRoom = this.findLastRoom(newRoom);\n          const rng = Math.random() * 2;\n          if(rng >= 1) {\n            this.horizontalCorridor(game, prevRoom, newRoom);\n            this.verticalCorridor(game, prevRoom, newRoom, false);\n          } else {\n            this.verticalCorridor(game, prevRoom, newRoom);\n            this.horizontalCorridor(game, prevRoom, newRoom, false);\n          }\n        }\n      }\n    }\n  }\n\n  importFromJson(JSONData) {\n    return (game) => {\n      var data = JSON.parse(JSONData);\n      this.import( game,\n                   data.rooms,\n                   data.corridors\n                );\n    }\n  }\n\n  import(game, rooms, corridors) {\n    const findTypeOfRoom = (arrayOfRoom, roomName) => {\n      const roomSelected = arrayOfRoom.find(room => {\n        return room.name === roomName;\n      });\n      if (!roomSelected) {\n        console.error(`\"${roomName}\" is unknonwn amoung theses classes: [${arrayOfRoom.map((t) => { return t.name;})} ]`);\n        return arrayOfRoom[0];\n      }\n      return roomSelected;\n    };\n\n    rooms.forEach(room => {\n      const newRoom = Reflect.construct(findTypeOfRoom(this.arrayOfRoom, room.klassName),[game, game.world, room.x, room.y, room.w, room.h]);\n      this.createRoom(newRoom);\n    });\n    corridors.forEach(corridor => {\n      const newCorridor = new Corridor(game, game.world, corridor.x, corridor.y, corridor.w, corridor.h, corridor.direction);\n      this.add(newCorridor);\n    });\n  }\n\n}\n\nexport default Maze;\n",
    "import { WallSize, RoomName } from './constants';\nimport RoomSprite from './roomSprite';\nimport Wall from './wall';\n\nconst WallName = \"RoomWall\";\nconst SpriteName = \"RoomSprite\";\n\nclass Room extends Phaser.Group {\n\n  constructor(game, parent, x, y, width, height) {\n    super(game, parent, RoomName, true, true, Phaser.Physics.ARCADE);\n    this.createRoom(game, x, y, width, height);\n    this.originalX = x;\n    this.originalY = y;\n    //width and height less the walls size\n    this.originalWidth = width;\n    this.originalHeight = height;\n  }\n\n  createRoom(game, x, y, width, height) {\n    const room = new RoomSprite(game, x, y, width, height);\n    this.add(room);\n    for(let i = x; i < x + width + WallSize; i += WallSize) {\n      const upWall = this.addWall(game, i, y - WallSize);\n      const downWall = this.addWall(game, i, y + height);\n      this.add(upWall);\n      this.add(downWall);\n    }\n    for(let j = y; j < y + height; j += WallSize) {\n      const leftWall = this.addWall(game, x - WallSize, j);\n      const rightWall = this.addWall(game, x + width, j);\n      this.add(leftWall);\n      this.add(rightWall);\n    }\n  }\n\n  addWall(game, x, y) {\n    let wall = new Wall(game, x, y, WallName);\n    //wall.alpha = 0.2;\n    return wall;\n  }\n\n  addAdditionalSprite(game) {\n    // NOTHING TO DO HERE\n  }\n\n  borders() {\n    return this.roomSprite();\n  }\n\n  walls() {\n    return this.children.filter(child => child.name === WallName);\n  }\n\n  roomSprite() {\n    return this.children.find(child => child.name === SpriteName);\n  }\n\n  overlapRoom(room) {\n    this.roomSprite().overlapRoom(room);\n  }\n\n}\n\nexport default Room;",
    "import {Color} from \"./constants.js\";\n\nclass RoomSprite extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height, color = Color) {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = {x: x + (width/2), y: y+ (height/2)};\n    // add constant\n    this.name = \"RoomSprite\";\n  }\n\n  overlapRoom(room) {\n      if (this.x + this.width < room.x) return false; // a is left of b\n      if (this.x > room.x + room.width) return false; // a is right of b\n      if (this.y + this.height < room.y) return false; // a is above b\n      if (this.y > room.y + room.height) return false; // a is below b\n      return true; // boxes overlap\n  }\n}\n\nexport default RoomSprite;",
    "export function isInside(compared, comparator) {\n  const rectCompared = {x: compared.x, y: compared.y, x2: compared.x + compared.width, y2: compared.y + compared.height};\n  const rectComparator = {x: comparator.x, y: comparator.y, x2: comparator.x + comparator.width, y2: comparator.y + comparator.height}\n\n  return rectCompared.x > rectComparator.x    &&\n         rectCompared.y > rectComparator.y    &&\n         rectCompared.x2 < rectComparator.x2  &&\n         rectCompared.y2 < rectComparator.y2\n}\n\nexport function overlap(box1, box2) {\n    if (box1.x + box1.width < box2.x) return false; // a is left of b\n    if (box1.x > box2.x + box2.width) return false; // a is right of b\n    if (box1.y + box1.height < box2.y) return false; // a is above b\n    if (box1.y > box2.y + box2.height) return false; // a is below b\n    return true; // boxes overlap\n}\n\nexport function overlapWithDifference(box1, box2) {\n  let output = {};\n  output.x = Math.max(box1.x, box2.x);\n  output.y = Math.max(box1.y, box2.y);\n  output.width = Math.min(box1.right, box2.right) - output.x;\n  output.height = Math.min(box1.bottom, box2.bottom) - output.y;\n  return [overlap(box1, box2), output];\n}\n\nexport function modGrid(modValue, value) {\n  const offset = value % modValue;\n  return value + (modValue - offset);\n}",
    "import {WallSize, WallColor} from './constants';\n\nclass Wall extends Phaser.Sprite {\n\n  constructor(game, x,y, name = \"Wall\") {\n    let bmd = game.add.bitmapData(WallSize,WallSize);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0, 0, WallSize, WallSize);\n    bmd.ctx.fillStyle = WallColor;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.name = name;\n    game.physics.arcade.enable(this);\n    this.body.immovable = true;\n  }\n}\n\nexport default Wall;",
    "class Character extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    game.physics.arcade.enable(this);\n    this.scale.setTo(0.25, 0.25);\n    //this.scale.setTo(0.5, 0.5);\n    this.cursors = game.input.keyboard.createCursorKeys();\n    //this.body.gravity.y = 600;\n  }\n\n  update() {\n    this.body.velocity.x = 0;\n    this.body.velocity.y = 0;\n\n    if (this.cursors.left.isDown)\n    {\n        this.body.velocity.x = -200;\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.body.velocity.x = 200;\n    }\n\n    if (this.cursors.up.isDown)\n    {\n        this.body.velocity.y = -200;\n    }\n    else if (this.cursors.down.isDown) {\n        this.body.velocity.y = 200;\n    }\n  }\n}\n\nexport default Character;",
    "import Room from \"../lib/room\";\n\nimport {CarpetWidth, CarpetHeight, WallSize} from \"../constants/constants\";\n\nimport { Carpet } from \"../constants/keyUtils\";\n\nclass RoomWithCarpet extends Room {\n\n  addAdditionalSprite(game) {\n    const heightRoom = this.height - 2 * WallSize;\n    const widthRoom = this.width - 2 * WallSize;\n    const x = this.originalX + widthRoom / 2 - CarpetWidth/2;\n    const y = this.originalY + heightRoom / 2 - CarpetHeight/2;\n\n    let carpet = game.add.sprite(x, y, Carpet);\n    this.add(carpet);\n  }\n}\n\nexport default RoomWithCarpet;",
    "import Room from \"../lib/room\";\n\nimport {CornerWidth, CornerHeight, WallSize} from \"../constants/constants\";\n\nimport { Corner } from \"../constants/keyUtils\";\n\nclass RoomWithColoredCorners extends Room {\n\n  addAdditionalSprite(game) {\n    const spriteRoomWidth = this.width - (2 * WallSize);\n    const spriteRoomHeight = this.height - (2 * WallSize);\n    this.addCorner(game, this.originalX, this.originalY);\n    this.addCorner(game, this.originalX + spriteRoomWidth - CornerWidth, this.originalY);\n\n    this.addCorner(game, this.originalX, this.originalY + spriteRoomHeight - CornerHeight);\n    this.addCorner(game, this.originalX + spriteRoomWidth  - CornerWidth, this.originalY + spriteRoomHeight - CornerHeight);\n  }\n\n  addCorner(game, x, y) {\n    const corner = game.add.sprite(x, y, Corner);\n    this.add(corner);\n  }\n}\n\nexport default RoomWithColoredCorners;",
    "const PATH = \"res/map-generator\";\nimport Hero from 'object/character';\nimport Maze from 'lib/maze';\nimport Room from 'lib/room';\nimport RoomWithCarpet from 'object/roomWithCarpet';\nimport RoomWithColoredCorners from \"object/roomWithColoredCorners\";\n\nimport { WorldWitdth, WorldHeight } from \"constants/constants\";\nimport { Character, Carpet, Corner } from \"constants/keyUtils\";\n\nclass GameState extends Phaser.State {\n\n  constructor() {\n    super();\n    this.useJsonData = false;\n    this.JSONData = null;\n  }\n\n  init(JSONData) {\n    if (JSONData !== undefined) {\n      this.useJsonData = true;\n      this.JSONData = JSONData;\n    }\n  }\n\n  create() {\n    this.game.time.advancedTiming = true;\n    this.game.stage.backgroundColor = \"#4488AA\";\n    this.game.world.setBounds(0, 0, WorldWitdth, WorldHeight);\n    this.character = new Hero(this.game, 50, 200, Character, 0);\n    this.maze = new Maze(this.game, this.game.world, WorldWitdth, WorldHeight, [Room, RoomWithCarpet, RoomWithColoredCorners]);\n    this.maze.generate(game, this.JSONData);\n    const roomPosition = this.maze.getInitialRoom().borders().center;\n    this.character.position.setTo(roomPosition.x,roomPosition.y);\n    this.game.add.existing(this.character);\n    this.game.camera.follow(this.character);\n\n    this.game.mazeCreated.dispatch();\n  }\n\n  update() {\n    this.game.physics.arcade.collide(this.character, this.maze.walls());\n  }\n\n  preload() {\n    this.game.load.image(Character, PATH + '/character.png');\n    this.game.load.image(Carpet, PATH + '/carpet.png');\n    this.game.load.image(Corner, PATH + '/corner.png');\n  }\n\n  render() {\n    this.game.debug.text(this.game.time.fps, 2, 14, \"#00ff00\");\n  }\n}\n\nexport default GameState;\n"
  ]
}