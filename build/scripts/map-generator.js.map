{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/map-generator/index.js",
    "src/map-generator/object/Character.js",
    "src/map-generator/object/Corridor.js",
    "src/map-generator/object/Room.js",
    "src/map-generator/object/dungeon.js",
    "src/map-generator/object/utils.js",
    "src/map-generator/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass MapGenerator extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.transparent = true;\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew MapGenerator();\n",
    "class Character extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    game.physics.arcade.enable(this);\n    this.scale.setTo(0.25, 0.25);\n    //this.scale.setTo(0.5, 0.5);\n    this.cursors = game.input.keyboard.createCursorKeys();\n    //this.body.gravity.y = 600;\n  }\n\n  update() {\n    this.body.velocity.x = 0;\n    this.body.velocity.y = 0;\n\n    if (this.cursors.left.isDown)\n    {\n        this.body.velocity.x = -200;\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.body.velocity.x = 200;\n    }\n\n    if (this.cursors.up.isDown)\n    {\n        this.body.velocity.y = -200;\n    }\n    else if (this.cursors.down.isDown) {\n        this.body.velocity.y = 200;\n    }\n  }\n}\n\nexport default Character;",
    "const Color = \"#473B3B\";\nconst Directions = [\"vertical\", \"horizontal\"];\n\nclass Corridor extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height, direction = \"vertical\") {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = Color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = { x: x + (width/2), y: y+ (height/2)};\n    this.name = \"corridor\";\n  }\n\n    overlapRoom(room) {\n        if (this.x + this.width < room.x) return false; // a is left of b\n        if (this.x > room.x + room.width) return false; // a is right of b\n        if (this.y + this.height < room.y) return false; // a is above b\n        if (this.y > room.y + room.height) return false; // a is below b\n        return true; // boxes overlap\n    }\n}\n\nexport default Corridor;",
    "const Color = \"#473B3B\";\n\nclass Room extends Phaser.Sprite {\n\n  constructor(game, x,y, width, height) {\n    let bmd = game.add.bitmapData(width,height);\n    // draw to the canvas context like normal\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0,0,width,height);\n    bmd.ctx.fillStyle = Color;\n    bmd.ctx.fill();\n\n    super(game,x,y, bmd);\n    this.center = {x: x + (width/2), y: y+ (height/2)};\n    this.name = \"room\";\n  }\n\n    overlapRoom(room) {\n        if (this.x + this.width < room.x) return false; // a is left of b\n        if (this.x > room.x + room.width) return false; // a is right of b\n        if (this.y + this.height < room.y) return false; // a is above b\n        if (this.y > room.y + room.height) return false; // a is below b\n        return true; // boxes overlap\n    }\n\n}\n\nexport default Room;",
    "import Room from './Room';\nimport Corridor from './Corridor';\nimport {isInside} from \"./utils\";\n\nconst CorridorHeight = 50;\nconst CorridorWidth = 50;\nconst MaxRoom = 10;\nconst MinRoomSize = 150;\nconst MaxRoomSize = 100;\n\nconst MapWidth = 1500;\nconst MapHeight = 800;\n\nclass Dungeon extends Phaser.Group {\n\n  constructor(game, parent, name, addToStage, enableBody, physicsBodyType) {\n    super(game, parent, name, false, true, Phaser.Physics.ARCADE);\n    for(let i = 0; i < MaxRoom; i++) {\n      const width = MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize + 1);\n      const height = MinRoomSize + Math.random() * (MaxRoomSize - MinRoomSize + 1);\n      const x = Math.random() * (MapWidth - width - 1) + 1;\n      const y = Math.random() * (MapHeight - height - 1) + 1;\n\n      let newRoom = new Room(game, x, y, width, height);\n      let failed = false;\n      this.children.some(child => {\n         failed = newRoom.overlapRoom(child);\n         if(failed) {\n          //exit le loop\n          return true;\n         }\n      });\n      if (!failed) {\n        // local function to carve out new room\n        this.createRoom(newRoom);\n        const newCenter = newRoom.center;\n        if(this.rooms().length > 1) {\n          const prevRoom = this.findLastRoom(newRoom);\n          const prevCenter = prevRoom.center;\n          const rng = Math.random() * 2;\n          if(rng >= 1) {\n            this.horizontalCorridor(game, prevRoom, newRoom);\n            this.verticalCorridor(game, prevRoom, newRoom, false);\n          } else {\n            this.verticalCorridor(game, prevRoom, newRoom);\n            this.horizontalCorridor(game, prevRoom, newRoom, false);\n          }\n        }\n      }\n    }\n  }\n\n  rooms(newRoom = null) {\n    return this.children.filter(child => {\n      return child.name === \"room\" && child != newRoom;\n    });\n  }\n\n  findLastRoom(newRoom) {\n    const rooms = this.rooms(newRoom);\n    return rooms[rooms.length - 1];\n  }\n\n  createRoom(room) {\n    this.add(room);\n  }\n\n  horizontalCorridor(game, prevRoom, newRoom, first = true) {\n    const x1 = Math.min(prevRoom.center.x, newRoom.center.x);\n    const x2 = Math.max(prevRoom.center.x, newRoom.center.x);\n    const y = first ? prevRoom.center.y : newRoom.center.y;\n    const width = x2 - x1;\n    const corridor = new Corridor(game, x1, y - CorridorHeight/2, width, CorridorHeight);\n    this.add(corridor);\n  }\n\n  verticalCorridor(game, prevRoom, newRoom, first = true) {\n    const y1 = Math.min(prevRoom.center.y, newRoom.center.y);\n    const y2 = Math.max(prevRoom.center.y, newRoom.center.y);\n    const x = first ? prevRoom.center.x : newRoom.center.x;\n    const height = y2 - y1;\n    const corridor = new Corridor(game, x - CorridorWidth/2, y1, CorridorWidth, height);\n    this.add(corridor);\n  }\n\n  getInitialRoom() {\n    return this.rooms()[0];\n  }\n\n  collide(character) {\n    let collide = false;\n    this.children.forEach(child => {\n      if(isInside(character, child)) {\n        collide = true;\n      }\n    });\n    return collide;\n  }\n\n\n}\n\nexport default Dungeon;",
    "\nexport function isInside(compared, comparator) {\n  const rectCompared = {x: compared.x, y: compared.y, x2: compared.x + compared.width, y2: compared.y + compared.height};\n  const rectComparator = {x: comparator.x, y: comparator.y, x2: comparator.x + comparator.width, y2: comparator.y + comparator.height}\n\n  return rectCompared.x > rectComparator.x    &&\n         rectCompared.y > rectComparator.y    &&\n         rectCompared.x2 < rectComparator.x2  &&\n         rectCompared.y2 < rectComparator.y2\n}\n\nexport function overlap(box1, box2) {\n    if (box1.x + box1.width < box2.x) return false; // a is left of b\n    if (box1.x > box2.x + box2.width) return false; // a is right of b\n    if (box1.y + box1.height < box2.y) return false; // a is above b\n    if (box1.y > box2.y + box2.height) return false; // a is below b\n    return true; // boxes overlap\n}\n\nexport function overlapWithDifference(box1, box2) {\n  let output = {};\n  output.x = Math.max(box1.x, box2.x);\n  output.y = Math.max(box1.y, box2.y);\n  output.width = Math.min(box1.right, box2.right) - output.x;\n  output.height = Math.min(box1.bottom, box2.bottom) - output.y;\n  return [overlap(box1, box2), output];\n}",
    "const PATH = \"res/map-generator\";\nimport Character from 'object/Character';\nimport Dungeon from 'object/dungeon';\n\nimport {isInside} from \"object/utils\";\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.stage.backgroundColor = \"#4488AA\";\n    this.game.world.setBounds(0, 0, 2000, 2000);\n    this.character = new Character(this.game, 50, 200, 'Character', 0);\n    this.dungeon = new Dungeon(this.game);\n    const roomPosition = this.dungeon.getInitialRoom().center;\n    this.character.position.setTo(roomPosition.x,roomPosition.y);\n    this.game.add.existing(this.character);\n    this.game.camera.follow(this.character);\n  }\n\n  update() {\n    if(!this.dungeon.collide(this.character)) {\n      this.character.x = this.character.oldPosition.x\n      this.character.y = this.character.oldPosition.y\n    }\n    this.character.oldPosition = {x: this.character.position.x, y: this.character.position.y};\n  }\n\n  preload() {\n    this.game.load.image('Character', PATH + '/character.png');\n  }\n}\n\nexport default GameState;\n"
  ]
}