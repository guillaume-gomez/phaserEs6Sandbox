{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/rough/index.js",
    "src/rough/object/Building.js",
    "src/rough/object/House.js",
    "src/rough/object/RoughSpriteGenerator.js",
    "src/rough/object/Sun.js",
    "src/rough/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass RoughExample extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew RoughExample();\n",
    "class Building extends Phaser.Group {\r\n\r\n  constructor(game, roughSpriteGenerator, x, y, width, height, config = {doorConfig: {}, windowConfig: {}, wallConfig: {}}, animated = false) {\r\n    super(game);\r\n    // basement\r\n    const defaultWallConfig = {\r\n      fill: 'rgba(200,200,200,0.8)',\r\n      fillStyle: 'solid'\r\n    };\r\n    console.log(animated);\r\n    let base = null;\r\n    if (animated) {\r\n      base = roughSpriteGenerator.getAnimatedRectangle( x, y, width, height, Object.assign({}, defaultWallConfig, config.wallConfig), 4);\r\n    } else {\r\n      base = roughSpriteGenerator.getRectangleSprite( x, y, width, height, Object.assign({}, defaultWallConfig, config.wallConfig));\r\n    }\r\n    // door\r\n    const doorHeight = height * 0.1;\r\n    const doorWidth = width * 0.15;\r\n    const defaultDoorConfig = {\r\n        fill: 'rgba(0,0,0,0.8)',\r\n        fillStyle: 'solid'\r\n    };\r\n    const door = roughSpriteGenerator.getRectangleSprite(\r\n        x + width/2 - doorWidth/2,\r\n        y + height - doorHeight,\r\n        doorWidth,\r\n        doorHeight,\r\n        Object.assign({}, defaultDoorConfig, config.doorConfig)\r\n    );\r\n    this.add(base);\r\n    this.add(door);\r\n\r\n    //windows\r\n    const windowWidth = 40;\r\n    const windowHeight = 60;\r\n    const spaces = 5;\r\n    const nbFloors = Math.floor((height - doorHeight - 10) / (windowHeight + spaces));\r\n    const nbWindowsByFloor = Math.floor((width - 10) / (windowWidth + spaces));\r\n\r\n    const offsetHeight = (height - doorHeight - (nbFloors * (windowHeight + spaces)) + spaces) / 2;\r\n    const offsetWidth = (width - (nbWindowsByFloor * (windowWidth + spaces)) + spaces) / 2;\r\n\r\n    const defaultWindowConfig = {\r\n        fill: 'rgba(182,211,223,1)',\r\n        fillStyle: 'solid'\r\n    };\r\n    for(let i = 0; i < nbFloors; ++i) {\r\n      for(let j = 0; j < nbWindowsByFloor; ++j) {\r\n        let newWindow = null;\r\n        if (animated) {\r\n          newWindow = roughSpriteGenerator.getAnimatedRectangle(\r\n            x + offsetWidth + j * ( windowWidth + spaces),\r\n            y + offsetHeight + i * (windowHeight + spaces),\r\n            windowWidth,\r\n            windowHeight,\r\n            Object.assign({}, defaultWindowConfig, config.windowConfig),\r\n            4);\r\n        } else {\r\n          newWindow = roughSpriteGenerator.getRectangleSprite(\r\n            x + offsetWidth + j * ( windowWidth + spaces),\r\n            y + offsetHeight + i * (windowHeight + spaces),\r\n            windowWidth,\r\n            windowHeight,\r\n            Object.assign({}, defaultWindowConfig, config.windowConfig));\r\n        }\r\n        this.add(newWindow);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Building;",
    "class House extends Phaser.Group {\r\n\r\nconstructor(game, roughSpriteGenerator, x, y, width, height) {\r\n    super(game);\r\n    const roofHeight = height * 0.35;\r\n    const baseHeight = height * 0.65;\r\n\r\n    // base\r\n    const base = roughSpriteGenerator.getRectangleSprite(x, y + roofHeight, width, baseHeight, {fill: \"pink\", fillStyle:\"solid\"});\r\n    //roof\r\n    const line = roughSpriteGenerator.getLineSprite(x, y + roofHeight, 0, 0, width/2, roofHeight, {fill: \"red\"});\r\n    const line2 = roughSpriteGenerator.getLineSprite(x + width, y + roofHeight, 0, 0, -width/2, roofHeight);\r\n\r\n    // door\r\n    const doorHeight = height * 0.3;\r\n    const doorWidth = width * 0.15;\r\n    const door = roughSpriteGenerator.getRectangleSprite(x + width/2 - doorWidth/2, y + height - doorHeight, doorWidth, doorHeight, { fill: \"red\", fillStyle: \"solid\"});\r\n\r\n    // windows\r\n    const offsetWindow = 15;\r\n    const houseWindow = roughSpriteGenerator.getRectangleSprite(x + offsetWindow, y + height/2, 30, 25, { fill: \"white\", fillStyle: \"solid\"});\r\n    const houseWindow2 = roughSpriteGenerator.getRectangleSprite(x + width - offsetWindow - 30, y + height/2, 30, 25, { fill: \"white\", fillStyle: \"solid\"});\r\n\r\n\r\n    this.add(base);\r\n    this.add(door);\r\n    this.add(line);\r\n    this.add(line2);\r\n    this.add(houseWindow);\r\n    this.add(houseWindow2);\r\n  }\r\n}\r\n\r\nexport default House;",
    "class RoughSpriteGenerator\r\n{\r\n  constructor(game) {\r\n    this.game = game;\r\n  }\r\n\r\n  getRectangle(bmd, width, height, config, x = 0, y = 0) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.rectangle(x, y, width, height, config);\r\n  }\r\n\r\n  getCircle(bmd, center, radius, config) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.circle(center.x, center.y, radius * 2, config);\r\n  }\r\n\r\n  getLine(bmd, dist, config) {\r\n    this.getRectangle(bmd, dist, 2, config);\r\n  }\r\n\r\n  getPolygon(bmd, data, config) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.path(data, config);\r\n  }\r\n\r\n  getCircleSprite(x, y, radius, config = {}) {\r\n    const defaultConfig = {\r\n      fill: \"rgb(10,150,10)\",\r\n      fillWeight: 5 // thicker lines for hachure\r\n    };\r\n    const configs = Object.assign({}, defaultConfig, config);\r\n    const realRadius = radius + (config.fillWeight|| 0);\r\n    let bmd = this.game.add.bitmapData(realRadius * 2, realRadius * 2);\r\n    this.getCircle(bmd, {x: realRadius, y: realRadius}, radius, configs);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  getRectangleSprite(x, y, width, height, config = {}) {\r\n    let bmd = this.game.add.bitmapData(width, height);\r\n    const defaultConfig = {\r\n        fill: 'black',\r\n        stroke: 'black',\r\n        hachureAngle: 60,\r\n        hachureGap: 10,\r\n        fillWeight: 5,\r\n        strokeWidth: 5\r\n      };\r\n    const configs = Object.assign({}, defaultConfig, config);\r\n    this.getRectangle(bmd, width, height, configs);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  getAnimatedRectangle(x,y, width, height, config, nbImages) {\r\n    let bmd = this.game.add.bitmapData(width * nbImages, height);\r\n    for(let i = 0; i < nbImages; i++) {\r\n      this.getRectangle(bmd, width, height, config, (i * width), 0);\r\n    }\r\n    const key = `${x}_${y}_${width}_${height}`;\r\n    this.game.cache.addSpriteSheet(key, null, bmd.canvas, width, height);\r\n\r\n    let sprite = new Phaser.Sprite(this.game, x, y, key);\r\n    const walk = sprite.animations.add('sketch');\r\n    walk.enableUpdate = true;\r\n    sprite.animations.play('sketch', 10, true);\r\n    return sprite;\r\n  }\r\n\r\n  getLineSprite(x, y, x1, y1, x2, y2, config = {}) {\r\n    const dist = this.lengthFromPoints(x1, y1, x2, y2);\r\n    let bmd = this.game.add.bitmapData(dist, 2);\r\n    this.getLine(bmd, dist, config);\r\n    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\r\n    let sprite = new Phaser.Sprite(this.game, x, y, bmd);\r\n    sprite.angle =- angle;\r\n    return sprite;\r\n  }\r\n\r\n  getPolygonSprite(x,y, data, width, height, config) {\r\n    let bmd = this.game.add.bitmapData(width, height);\r\n    this.getPolygon(bmd, data, config);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  lengthFromPoints(x1, y1, x2, y2) {\r\n     return Math.sqrt( ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)) );\r\n  }\r\n\r\n}\r\nexport default RoughSpriteGenerator;",
    "class Sun extends Phaser.Group {\r\n\r\nconstructor(game, roughSpriteGenerator, x, y, radius) {\r\n    super(game);\r\n    const offset = 5;\r\n    const offset2 = offset + 2;\r\n    const core = roughSpriteGenerator.getCircleSprite(x + radius/2 , y + radius/2, radius/2 , {fill: \"rgb(255,255,102)\"});\r\n    const line = roughSpriteGenerator.getLineSprite(x, y + radius, 0, 0, radius/2- offset, 0);\r\n    const line2 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius + offset, y + radius, 0, 0, radius/2 - offset, 0);\r\n    const line3 = roughSpriteGenerator.getLineSprite(x + radius, y + radius/2 - offset, 0, 0, 0, radius/2 - offset);\r\n    const line4 = roughSpriteGenerator.getLineSprite(x + radius, y + 2 * radius, 0, 0, 0, radius/2 - offset);\r\n\r\n    const line5 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius, y + radius/2, 0, 0, radius/2 - offset2, radius/2 - offset2);\r\n    const line6 = roughSpriteGenerator.getLineSprite(x + offset2, y + offset2, 0, 0, radius/2 - offset2, -radius/2 + offset2);\r\n    const line7 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius, y + 1.5  * radius, 0, 0, radius/2 - offset2, -radius/2 + offset2);\r\n    const line8 = roughSpriteGenerator.getLineSprite(x + offset2, y + 2 * radius - offset2, 0, 0, radius/2 - offset2 , radius/2 - offset2);\r\n\r\n\r\n    this.add(core);\r\n    this.add(line);\r\n    this.add(line2);\r\n    this.add(line3);\r\n    this.add(line4);\r\n    this.add(line5);\r\n    this.add(line6);\r\n    this.add(line7);\r\n    this.add(line8);\r\n  }\r\n}\r\n\r\nexport default Sun;",
    "import RoughSpriteGenerator from 'object/RoughSpriteGenerator';\nimport Sun from 'object/Sun';\nimport House from 'object/House';\nimport Building from 'object/Building';\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.time.advancedTiming = true;\n    this.game.stage.backgroundColor = \"#a9f1f6\";\n\n    this.game.world.setBounds(0, 0, 1500, 600);\n\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    this.game.physics.arcade.gravity.y = 300;\n    // rough sprite generator\n    const rsg = new RoughSpriteGenerator(this.game);\n\n    this.house = new House(this.game, rsg, 50, this.game.height - 32 - 100, 150, 100);\n    this.game.add.existing(this.house);\n\n    this.house2 = new House(this.game, rsg, this.game.width - 20, this.game.height - 32 - 150, 150, 150);\n    this.game.add.existing(this.house2);\n\n    this.building = new Building(\n      this.game,\n      rsg,\n      250,\n      this.game.height - 32 - 400,\n      200,\n      400,\n      {wallConfig: { fill: \"rgba(226, 78, 46, 1.0)\"}},\n      true\n    );\n    this.game.add.existing(this.building);\n\n    this.building2 = new Building(\n      this.game,\n      rsg,\n      500,\n      this.game.height - 32 - 300,\n      250,\n      300,\n      {wallConfig: { fill: \"rgba(204, 179, 151, 1.0)\"}}\n    );\n    this.game.add.existing(this.building2);\n\n    this.building3 = new Building(\n      this.game,\n      rsg,\n      this.game.world.bounds.width - 400,\n      this.game.height - 32 - 500,\n      200,\n      500,\n      {},\n      true);\n    this.game.add.existing(this.building3);\n\n    this.sun = new Sun(this.game, rsg, 0, 0, 75);\n    this.game.add.existing(this.sun);\n\n    this.cloud = rsg.getPolygonSprite(500, 30, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white', strokeWidth: 3, fillWeight: 5});\n    this.cloud.scale.setTo(0.45,0.45);\n    // add my own attribute\n    this.cloud.vel = -0.05;\n    this.game.add.existing(this.cloud);\n\n    this.cloud2 = rsg.getPolygonSprite(0, 50, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white',  strokeWidth: 3, fillWeight: 5});\n    this.cloud2.scale.setTo(0.5,0.5);\n    this.cloud2.vel = 0.08;\n    this.game.add.existing(this.cloud2);\n\n    this.cloud3 = rsg.getPolygonSprite(700, 10, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white',  strokeWidth: 3, fillWeight: 5});\n    this.cloud3.scale.setTo(0.35,0.35);\n    this.cloud3.vel = 0.1;\n    this.game.add.existing(this.cloud3);\n\n\n    this.group = this.game.add.group();\n    for(let i=0; i < 25; i++) {\n      const rnd = Math.random();\n      const x = this.getRandomInt((i * 50), (i + 1) * 50);\n      const y = this.getRandomInt(350, 450);\n      const config = {\n        fill: this.getRandomColor(),\n        fillWeight: this.getRandomInt(1, 5)\n      }\n      let sprite = null;\n      if(rnd > 0.5) {\n        const radius = this.getRandomInt(10, 25)\n        sprite = rsg.getCircleSprite(x, y, radius, config);\n        this.game.physics.enable(sprite, Phaser.Physics.ARCADE);\n        const realRadius = radius + (config.fillWeight|| 0);\n        sprite.body.setCircle(realRadius);\n      } else {\n        const width = this.getRandomInt(20, 50);\n        const height = this.getRandomInt(20, 50);\n        sprite = rsg.getRectangleSprite(x, y, width, height, config);\n        this.game.physics.enable(sprite, Phaser.Physics.ARCADE);\n      }\n      sprite.body.bounce.setTo (0.80, 0.80);\n      sprite.body.collideWorldBounds = true;\n      sprite.body.velocity.x = this.getRandomInt(-75, 75);\n      this.group.add(sprite);\n    }\n\n    this.character = rsg.getAnimatedRectangle(100, 450, 50, 75, {\n        fill: \"#00B0FF\",\n        roughness: 1.5,\n        strokeWidth: 10,\n        hachureAngle: 90,\n        hachureGap: 5,\n        fillWeight: 5,\n        strokeWidth: 5\n      }, 4);\n    this.game.physics.enable(this.character, Phaser.Physics.ARCADE);\n    this.character.body.collideWorldBounds = true;\n    this.game.add.existing(this.character);\n    this.game.camera.follow(this.character);\n\n    this.ground = rsg.getRectangleSprite(0, this.game.height - 32 , this.game.world.bounds.width, 30, {fill: \"#00A6A6\", strokeWidth: 2});\n    this.game.physics.enable(this.ground, Phaser.Physics.ARCADE);\n    this.ground.body.allowGravity = false;\n    this.ground.body.immovable = true;\n    this.game.add.existing(this.ground);\n\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n  }\n\n  preload() {\n  }\n\n  cloudManagement() {\n    [this.cloud, this.cloud2, this.cloud3].forEach(cloud => {\n      if(cloud.x + cloud.width > this.game.world.bounds.width) {\n        cloud.x = 0;\n      } else if(cloud.x + cloud.width < 0) {\n        cloud.x = this.game.world.bounds.width - cloud.width;\n      } else {\n        cloud.x += cloud.vel;\n      }\n    });\n  }\n\n  update() {\n    this.game.physics.arcade.collide(this.character, this.ground);\n    this.game.physics.arcade.collide(this.group, this.ground);\n\n    this.character.body.velocity.x = 0;\n    if (this.cursors.left.isDown)\n    {\n        this.character.body.velocity.x = -150;\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.character.body.velocity.x = 150;\n    }\n\n    if ((this.cursors.up.isDown || this.jumpButton.isDown) && !this.character.body.touching.none)\n    {\n        this.character.body.velocity.y = -300;\n    }\n\n    this.cloudManagement();\n  }\n\n  render() {\n    this.game.debug.text(this.game.time.fps, 2, 14, \"#00ff00\");\n    //this.game.debug.spriteBounds(this.house)\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n\nexport default GameState;\n"
  ]
}