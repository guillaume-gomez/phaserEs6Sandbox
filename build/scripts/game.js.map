{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/RainbowText.js",
    "src/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\nconstructor() {\n    let map;\n    let tileset;\n    let layer;\n    let player;\n    let cursors;\n    super(500, 500, Phaser.AUTO, 'content', null);\n    //this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n\n}\n\nnew Game();\n",
    "class RainbowText extends Phaser.Text {\n\n\tconstructor(game, x, y, text) {\n\n\t\tsuper(game, x, y, text, { font: \"45px Arial\", fill: \"#ff0044\", align: \"center\" });\n\n\t\tthis._speed = 125; //ms\n\t\tthis._colorIndex = 0;\n\t\tthis._colors = ['#ee4035', '#f37736', '#fdf498', '#7bc043', '#0392cf'];\n\n\t\tthis.colorize();\n\t\tthis.startTimer();\n\n\t\tthis.game.stage.addChild(this);\n\n\t}\n\n\tstartTimer() {\n\t\tthis.game.time.events.loop(this._speed, this.colorize, this).timer.start();\n\t}\n\n\tcolorize() {\n\n\t\tfor (let i = 0; i < this.text.length; i++) {\n\n\t\t\tif (this._colorIndex === this._colors.length) {\n\t\t\t\tthis._colorIndex = 0;\n\t\t\t}\n\n\t\t\tthis.addColor(this._colors[this._colorIndex], i);\n\t\t\tthis._colorIndex++;\n\n\t\t}\n\n\t}\n\n}\n\nexport default RainbowText;",
    "import RainbowText from 'objects/RainbowText';\n\nclass GameState extends Phaser.State {\n\n  create() {\n    console.log(this);\n    // adding the \"level\" tilemap created at line 27 to the game\n    this.map = this.game.add.tilemap(\"level\");\n    // // adding the \"tiles\" tileset created at line 30 to the game\n    this.map.addTilesetImage('toto', \"tile\");\n    // // this is the way we tell the script every tile in our engine needs to be checked\n    // // for collision. This way all tiles are solid\n    //this.tileset.setCollisionRange(0, this.tileset.total-1, true, true, true, true);\n    // // now we need to create a game layer, and assign it a tile set and a map\n    this.layer = new Phaser.TilemapLayer(this.game, this.map, 0, 640, 480);\n    this.layer.resizeWorld();\n    //let layer = this.game.add.tilemapLayer(0, 0, 640, 480, this.tileset, map, 0);\n    // // finally we create the player placing \"hero\" instance at x=32, y=416\n    this.player = this.game.add.sprite(32, 416, \"hero\");\n    // // this is the gravity applied to the player\n    this.game.physics.arcade.enable(this.player);\n    this.player.body.gravity.y = 8;\n    this.player.body.collideWorldBounds = true;\n\n    // // the fastest way to create game controls is \"createCursorKeys\" method\n    // // which automatically assigns up, down, left and right movement to\n    // // arrow keys\n    // cursors = game.input.keyboard.createCursorKeys();\n  }\n\n  preload() {\n    console.log(\"preload\");\n    this.game.load.tilemap(\"level\", \"res/level.json\", null, Phaser.Tilemap.TILED_JSON);\n    this.game.load.image(\"tile\", \"res/tiles.png\");\n    this.game.load.image(\"hero\", \"res/hero.png\");\n  }\n\n  update() {\n    //console.log(\"update\");\n  }\n\n}\n\nexport default GameState;\n"
  ]
}