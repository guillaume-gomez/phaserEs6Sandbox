{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\first-game\\index.js",
    "src\\first-game\\objects\\Player.js",
    "src\\first-game\\objects\\ScoreText.js",
    "src\\first-game\\objects\\Terrain.js",
    "src\\first-game\\states\\GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\n  constructor() {\n    super(450, 800, Phaser.AUTO, 'content', null);\n    this.score = 0;\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n\n  gameOver(){\n    this.score = 0;\n    this.state.start('GameState');\n  }\n\n  incrementScore() {\n    this.score += 1;\n  }\n\n}\n\nnew Game();\n",
    "class Player extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    //Set the players anchor point to be in the middle horizontally\n    this.anchor.setTo(0.5, 1.0);\n\n    //Enable physics on the player\n    game.physics.arcade.enable(this);\n\n    //Make the player fall by applying gravity\n    this.body.gravity.y = 2000;\n\n    //Make the player collide with the game boundaries\n    this.body.collideWorldBounds = true;\n\n    //Make the player bounce a little\n    this.body.bounce.y = 0.1;\n  }\n\n  handleMove(cursors) {\n    //Make the sprite jump when the up key is pushed\n    if(cursors.up.isDown && this.body.wasTouching.down) {\n        this.body.velocity.y = -1400;\n    }\n    //Make the player go left\n    if(cursors.left.isDown){\n        this.body.velocity.x += -30;\n    }\n    //Make the player go right\n    if(cursors.right.isDown){\n        this.body.velocity.x += 30;\n    }\n  }\n\n}\n\nexport default Player;",
    "class ScoreText extends Phaser.Text {\n\n  constructor(game, x, y, text, style) {\n    super(game, x, y, text, style);\n    this.anchor.setTo(0.5, 0.5);\n    this.align = 'center';\n  }\n\n  render(score){\n    this.text = score;\n  }\n}\n\nexport default ScoreText;",
    "class Terrain {\n\n  constructor(game, platforms) {\n    this.game = game;\n    this.platforms = platforms;\n    //binding\n    this.addPlatform = this.addPlatform.bind(this);\n    this.initPlatforms = this.initPlatforms.bind(this);\n  }\n\n  initPlatforms() {\n    let bottom = this.game.world.height - this.game.tileHeight;\n    let top = this.game.tileHeight;\n    //Keep creating platforms until they reach (near) the top of the screen\n    for(var y = bottom; y > top - this.game.tileHeight; y = y - this.game.spacing){\n        this.addPlatform(y);\n    }\n  }\n\n\n  addTile(x, y){\n    //Get a tile that is not currently on screen\n    let tile = this.platforms.getFirstDead();\n\n    //Reset it to the specified coordinates\n    tile.reset(x, y);\n    tile.body.velocity.y = 150;\n    tile.body.immovable = true;\n\n    //When the tile leaves the screen, kill it\n    tile.checkWorldBounds = true;\n    tile.outOfBoundsKill = true;\n  }\n\n  addPlatform(y){\n    //If no y position is supplied, render it just outside of the screen\n    if(typeof(y) == \"undefined\"){\n      y = -this.game.tileHeight;\n      //increase the score\n      this.game.incrementScore();\n    }\n    //Work out how many tiles we need to fit across the whole screen\n    var tilesNeeded = Math.ceil(this.game.world.width / this.game.tileWidth);\n\n    //Add a hole randomly somewhere\n    var hole = Math.floor(Math.random() * (tilesNeeded - 3)) + 1;\n\n    //Keep creating tiles next to each other until we have an entire row\n    //Don't add tiles where the random hole is\n    for (var i = 0; i < tilesNeeded; i++){\n        if (i != hole && i != hole + 1){\n            this.addTile(i * this.game.tileWidth, y);\n        }\n    }\n  }\n}\n\nexport default Terrain;",
    "import Terrain from 'objects/Terrain';\nimport Player from 'objects/Player';\nimport ScoreText from 'objects/ScoreText'\n\nclass GameState extends Phaser.State {\n\n  create() {\n    //Get the dimensions of the tile we are using\n    this.game.tileWidth = this.game.cache.getImage('tile').width;\n    this.game.tileHeight = this.game.cache.getImage('tile').height;\n    //The spacing for the initial platforms\n    this.game.spacing = 300;\n    //Set the background colour to blue\n    this.game.stage.backgroundColor = '479cde';\n\n    //Enable the Arcade physics system\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n\n    //add new player\n    this.player = new Player(this.game, this.game.world.centerX, this.game.world.height - (this.spacing * 2 + (3 * this.tileHeight)), 'player');\n    this.game.add.existing(this.player);\n\n    //Add a platforms group to hold all of our tiles, and create a bunch of them\n    this.platforms = this.game.add.group();\n    this.platforms.enableBody = true;\n    this.platforms.createMultiple(250, 'tile');\n\n    let terrain = new Terrain(this.game, this.platforms);\n    //Create the inital on screen platforms\n    terrain.initPlatforms();\n    this.game.time.events.loop(2000, terrain.addPlatform, this);\n\n    //Enable cursor keys so we can create some controls\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    const scoreFont = \"100px Arial\";\n    this.scoreText = new ScoreText(this.game, this.game.world.centerX, 100, \"0\", {font: scoreFont, fill: \"#fff\"});\n    this.game.add.existing(this.scoreText);\n\n  }\n\n  preload() {\n    this.game.load.image('tile', 'res/tile.png');\n    this.game.load.image('player', 'res/player.png');\n  }\n\n  update() {\n    //Make the sprite collide with the ground layer\n    this.game.physics.arcade.collide(this.player, this.platforms);\n    //Check if the player is touching the bottom\n    //console.log(this.player.body.position)\n    if(this.player.body.position.y >= this.game.world.height - this.player.body.height){\n        this.game.gameOver();\n    }\n    this.player.handleMove(this.cursors);\n    this.scoreText.render(this.game.score);\n  }\n}\n\nexport default GameState;\n"
  ]
}