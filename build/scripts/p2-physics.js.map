{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\p2-physics\\index.js",
    "src\\p2-physics\\objects\\Box.js",
    "src\\p2-physics\\objects\\Player.js",
    "src\\p2-physics\\objects\\Rope.js",
    "src\\p2-physics\\states\\GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass P2Physics extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.transparent = false;\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew P2Physics();\n",
    "class Box extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame, material) {\n    super(game, x, y, key, frame);\n    game.physics.p2.enable(this);\n    //const boxMaterial = game.physics.p2.createMaterial('worldMaterial');\n    this.body.mass = 100;\n    this.body.setMaterial(material);\n\n  }\n}\n\nexport default Box;",
    "class Player extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame, material) {\n    super(game, x, y, key, frame);\n    this.facing = \"left\";\n    this.jumpTimer = 0;\n    \n    this.animations.add('left', [0, 1, 2, 3], 10, true);\n    this.animations.add('turn', [4], 20, true);\n    this.animations.add('right', [5, 6, 7, 8], 10, true);\n\n    game.physics.p2.enable(this);\n    this.body.fixedRotation = true;\n    this.body.setMaterial(material);\n  }\n\n  handleMove(cursors, jumpButton, game) {\n    if (cursors.left.isDown)\n    {\n        this.body.moveLeft(200);\n\n        if (this.facing != 'left')\n        {\n            this.animations.play('left');\n            this.facing = 'left';\n        }\n    }\n    else if (cursors.right.isDown)\n    {\n        this.body.moveRight(200);\n\n        if (this.facing != 'right')\n        {\n            this.animations.play('right');\n            this.facing = 'right';\n        }\n    }\n    else\n    {\n        this.body.velocity.x = 0;\n\n        if (this.facing != 'idle')\n        {\n            this.animations.stop();\n\n            if (this.facing == 'left')\n            {\n                this.frame = 0;\n            }\n            else\n            {\n                this.frame = 5;\n            }\n\n            this.facing = 'idle';\n        }\n    }\n    \n    if ((jumpButton.isDown || cursors.up.isDown) && game.time.now > this.jumpTimer && this.checkIfCanJump(game))\n    {\n      this.body.moveUp(300);\n      this.jumpTimer = game.time.now + 750;\n    }\n  }\n\n\n  checkIfCanJump(game) {\n    const yAxis = p2.vec2.fromValues(0, 1);\n    let result = false;\n\n      for (var i = 0; i < game.physics.p2.world.narrowphase.contactEquations.length; i++)\n      {\n          const c = game.physics.p2.world.narrowphase.contactEquations[i];\n\n          if (c.bodyA === this.body.data || c.bodyB === this.body.data)\n          {\n              let d = p2.vec2.dot(c.normalA, yAxis); // Normal dot Y-axis\n              if (c.bodyA === this.body.data) d *= -1;\n              if (d > 0.5) result = true;\n          }\n      }\n      \n      return result;\n\n  }\n\n}\n\nexport default Player;",
    "class Rope extends Phaser.Group {\n\n  constructor(game, xAnchor, yAnchor, key, length, frame) {\n    super(game, xAnchor, yAnchor, key, frame);\n    let lastRect;\n    const heightBody = 20;        //  Height for the physics body - your image height is 8px\n    const widthBody = 16;         //  This is the width for the physics body. If too small the rectangles will get scrambled together.\n    const maxForce = 20000;   //  The force that holds the rectangles together.\n\n    for (let i = 0; i <= length; i++)\n    {\n      const x = xAnchor;                    //  All rects are on the same x position\n      const y = yAnchor + (i * heightBody);     //  Every new rect is positioned below the last\n      let newRect = null;\n\n      if (i % 2 === 0)\n      {\n        //  Add sprite (and switch frame every 2nd time)\n        newRect = this.create(x, y, key, 1);\n      }\n      else\n      {\n        newRect = this.create(x, y, key, 0);\n        lastRect.bringToTop();\n      }\n\n      //  Enable physicsbody\n      game.physics.p2.enable(newRect, false);\n\n      //  Set custom rectangle\n      newRect.body.setRectangle(widthBody, heightBody);\n\n      if (i === 0)\n      {\n        newRect.body.static = true;\n      }\n      else\n      {\n        //  Anchor the first one created\n        newRect.body.velocity.x = 400;//  Give it a push :) just for fun\n        newRect.body.mass = length / i;//  Reduce mass for evey rope element\n      }\n      //  After the first rectangle is created we can add the constraint\n      if (lastRect)\n      {\n        game.physics.p2.createRevoluteConstraint(newRect, [0, -10], lastRect, [0, 10], maxForce);\n      }\n      lastRect = newRect;\n    }\n  }\n\n}\n\nexport default Rope;",
    "import Player from 'objects/Player';\nimport Box from 'objects/Box';\nimport Rope from 'objects/Rope';\n\nconst PATH = \"res/p2-physics/\";\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.physics.startSystem(Phaser.Physics.P2JS);\n    this.game.stage.backgroundColor = '#2d2d2d';\n\n    let map = this.game.add.tilemap('map');\n\n    map.addTilesetImage('ground_1x1');\n    map.addTilesetImage('walls_1x2');\n    map.addTilesetImage('tiles2');\n\n    let layer = map.createLayer('Tile Layer 1');\n\n    layer.resizeWorld();\n\n    //  Set the tiles for collision.\n    //  Do this BEFORE generating the p2 bodies below.\n    map.setCollisionBetween(1, 12);\n\n    //  Convert the tilemap layer into bodies. Only tiles that collide (see above) are created.\n    //  This call returns an array of body objects which you can perform addition actions on if\n    //  required. There is also a parameter to control optimising the map build.\n    this.game.physics.p2.convertTilemap(map, layer);\n\n    this.game.physics.p2.restitution = 0.5;\n    this.game.physics.p2.gravity.y = 300;\n\n    this.createMaterials();\n    this.box = new Box(this.game, 500, 400-95, 'block', 0, this.boxMaterial);\n    this.game.add.existing(this.box);\n\n    this.box2 = new Box(this.game, 500, 400, 'block', 0, this.boxMaterial);\n    this.game.add.existing(this.box2);\n\n    this.rope = new Rope(this.game, 400, 32, 'chain', 10);\n    this.game.add.existing(this.rope);\n\n    this.player = new Player(this.game, 100, 200, 'dude', 0, this.spriteMaterial);\n    this.game.add.existing(this.player);\n\n    this.music = this.game.add.audio('sfx');\n    this.music.allowMultiple = false;\n    this.music.addMarker('charm', 0, 2.7);\n    this.music.addMarker('curse', 4, 2.9);\n    this.music.play('charm');\n\n\n    //this.game.physics.p2.setWorldMaterial(this.worldMaterial, true, true, true, true);\n    //other materials are defined in each objects\n\n    this.game.camera.follow(this.player);\n\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n\n    this.player.body.onBeginContact.add(this.playerHit, this);\n\n  }\n\n  playerHit(body, bodyB, shapeA, shapeB, equation) {\n    if(body && body.sprite) {\n        this.music.play('curse');\n    }\n  }\n\n  update() {\n    this.player.handleMove(this.cursors, this.jumpButton, this.game);\n  }\n\n  preload() {\n    this.game.load.tilemap('map', PATH + 'collision_test.json', null, Phaser.Tilemap.TILED_JSON);\n    this.game.load.image('ground_1x1', PATH + 'ground_1x1.png');\n    this.game.load.image('walls_1x2', PATH + 'walls_1x2.png');\n    this.game.load.image('tiles2', PATH +'tiles2.png');\n    this.game.load.image('block', PATH + 'block.png');\n    this.game.load.spritesheet('dude', PATH + 'dude.png', 32, 48);\n    this.game.load.spritesheet('chain', PATH + 'chain.png', 16, 26);\n    this.game.load.audio('sfx', [ PATH + 'magical_horror_audiosprite.mp3', PATH + 'magical_horror_audiosprite.ogg' ]);\n  }\n\n  render() {\n    //this.game.debug.spriteInfo(this.player, 32, 32);\n    //this.bodyDebug = new Phaser.Physics.P2.BodyDebug(this.game, this.box);\n  }\n\n  createMaterials() {\n    this.worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');\n    this.spriteMaterial = this.game.physics.p2.createMaterial('spriteMaterial');\n    this.boxMaterial = this.game.physics.p2.createMaterial('worldMaterial');\n  }\n\n}\n\nexport default GameState;"
  ]
}