{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/light-the-map/external/visibility_polygon_dev.js",
    "src/light-the-map/index.js",
    "src/light-the-map/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/*\nvisibility_polygon.js version 1.9\n\nThis code is released into the public domain - attribution is appreciated but not required.\nMade by Byron Knoll.\n\nhttps://github.com/byronknoll/visibility-polygon-js\nDemo: http://www.byronknoll.com/visibility.html\n\nThis library can be used to construct a visibility polygon for a set of line segments.\n\nThe time complexity of this implementation is O(N log N) (where N is the total number of line segments). This is the optimal time complexity for this problem.\n\nThe following functions should be useful:\n\n1) VisibilityPolygon.compute(position, segments)\n  Computes a visibility polygon. O(N log N) time complexity (where N is the number of line segments).\n  Arguments:\n    position - The location of the observer. If the observer is not completely surrounded by line segments, an outer bounding-box will be automatically created (so that the visibility polygon does not extend to infinity).\n    segments - A list of line segments. Each line segment should be a list of two points. Each point should be a list of two coordinates. Line segments can not intersect each other. Overlapping vertices are OK, but it is not OK if a vertex is touching the middle of a line segment. Use the \"breakIntersections\" function to fix intersecting line segments.\n  Returns: The visibility polygon (in clockwise vertex order).\n\n2) VisibilityPolygon.computeViewport(position, segments, viewportMinCorner, viewportMaxCorner)\n  Computes a visibility polygon within the given viewport. This can be faster than the \"compute\" function if there are many segments outside of the viewport.\n  Arguments:\n    position - The location of the observer. Must be within the viewport.\n    segments - A list of line segments. Line segments can not intersect each other. It is OK if line segments intersect the viewport.\n    viewportMinCorner - The minimum X and Y coordinates of the viewport.\n    viewportMaxCorner - The maximum X and Y coordinates of the viewport.\n  Returns: The visibility polygon within the viewport (in clockwise vertex order).\n\n3) VisibilityPolygon.inPolygon(position, polygon)\n  Calculates whether a point is within a polygon. O(N) time complexity (where N is the number of points in the polygon).\n  Arguments:\n    position - The point to check: a list of two coordinates.\n    polygon - The polygon to check: a list of points. The polygon can be specified in either clockwise or counterclockwise vertex order.\n  Returns: True if \"position\" is within the polygon.\n\n4) VisibilityPolygon.convertToSegments(polygons)\n  Converts the given polygons to list of line segments. O(N) time complexity (where N is the number of polygons).\n  Arguments: a list of polygons (in either clockwise or counterclockwise vertex order). Each polygon should be a list of points. Each point should be a list of two coordinates.\n  Returns: a list of line segments.\n\n5) VisibilityPolygon.breakIntersections(segments)\n  Breaks apart line segments so that none of them intersect. O(N^2) time complexity (where N is the number of line segments).\n  Arguments: a list of line segments. Each line segment should be a list of two points. Each point should be a list of two coordinates.\n  Returns: a list of line segments.\n\nExample code:\n\nvar polygons = [];\npolygons.push([[-1,-1],[501,-1],[501,501],[-1,501]]);\npolygons.push([[250,100],[260,140],[240,140]]);\nvar segments = VisibilityPolygon.convertToSegments(polygons);\nsegments = VisibilityPolygon.breakIntersections(segments);\nvar position = [60, 60];\nif (VisibilityPolygon.inPolygon(position, polygons[0])) {\n  var visibility = VisibilityPolygon.compute(position, segments);\n}\nvar viewportVisibility = VisibilityPolygon.computeViewport(position, segments, [50, 50], [450, 450]);\n\n*/\n\nfunction VisibilityPolygon(){};\n\nVisibilityPolygon.compute = function(position, segments) {\n\tvar bounded = [];\n\tvar minX = position[0];\n\tvar minY = position[1];\n\tvar maxX = position[0];\n\tvar maxY = position[1];\n\tfor (var i = 0; i < segments.length; ++i) {\n\t\tfor (var j = 0; j < 2; ++j) {\n\t\t\tminX = Math.min(minX, segments[i][j][0]);\n\t\t\tminY = Math.min(minY, segments[i][j][1]);\n\t\t\tmaxX = Math.max(maxX, segments[i][j][0]);\n\t\t\tmaxY = Math.max(maxY, segments[i][j][1]);\n\t\t}\n\t\tbounded.push([[segments[i][0][0], segments[i][0][1]], [segments[i][1][0], segments[i][1][1]]]);\n\t}\n\t--minX;\n\t--minY;\n\t++maxX;\n\t++maxY;\n\tbounded.push([[minX, minY],[maxX, minY]]);\n\tbounded.push([[maxX, minY],[maxX, maxY]]);\n\tbounded.push([[maxX, maxY],[minX, maxY]]);\n\tbounded.push([[minX, maxY],[minX, minY]]);\n\tvar polygon = [];\n\tvar sorted = VisibilityPolygon.sortPoints(position, bounded);\n\tvar map = new Array(bounded.length);\n\tfor (var i = 0; i < map.length; ++i) map[i] = -1;\n\tvar heap = [];\n\tvar start = [position[0] + 1, position[1]];\n\tfor (var i = 0; i < bounded.length; ++i) {\n\t\tvar a1 = VisibilityPolygon.angle(bounded[i][0], position);\n\t\tvar a2 = VisibilityPolygon.angle(bounded[i][1], position);\n\t\tvar active = false;\n\t\tif (a1 > -180 && a1 <= 0 && a2 <= 180 && a2 >= 0 && a2 - a1 > 180) active = true;\n\t\tif (a2 > -180 && a2 <= 0 && a1 <= 180 && a1 >= 0 && a1 - a2 > 180) active = true;\n\t\tif (active) {\n\t\t\tVisibilityPolygon.insert(i, heap, position, bounded, start, map);\n\t\t}\n\t}\n\tfor (var i = 0; i < sorted.length;) {\n\t\tvar extend = false;\n\t\tvar shorten = false;\n\t\tvar orig = i;\n\t\tvar vertex = bounded[sorted[i][0]][sorted[i][1]];\n\t\tvar old_segment = heap[0];\n\t\tdo {\n\t\t\tif (map[sorted[i][0]] != -1) {\n\t\t\t\tif (sorted[i][0] == old_segment) {\n\t\t\t\t\textend = true;\n\t\t\t\t\tvertex = bounded[sorted[i][0]][sorted[i][1]];\n\t\t\t\t}\n\t\t\t\tVisibilityPolygon.remove(map[sorted[i][0]], heap, position, bounded, vertex, map);\n\t\t\t} else {\n\t\t\t\tVisibilityPolygon.insert(sorted[i][0], heap, position, bounded, vertex, map);\n\t\t\t\tif (heap[0] != old_segment) {\n\t\t\t\t\tshorten = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t++i;\n\t\t\tif (i == sorted.length) break;\n\t\t} while (sorted[i][2] < sorted[orig][2] + VisibilityPolygon.epsilon());\n\n\t\tif (extend) {\n\t\t\tpolygon.push(vertex);\n\t\t\tvar cur = VisibilityPolygon.intersectLines(bounded[heap[0]][0], bounded[heap[0]][1], position, vertex);\n\t\t\tif (!VisibilityPolygon.equal(cur, vertex)) polygon.push(cur);\n\t\t} else if (shorten) {\n\t\t\tpolygon.push(VisibilityPolygon.intersectLines(bounded[old_segment][0], bounded[old_segment][1], position, vertex));\n\t\t\tpolygon.push(VisibilityPolygon.intersectLines(bounded[heap[0]][0], bounded[heap[0]][1], position, vertex));\n\t\t} \n\t}\n\treturn polygon;\n};\n\nVisibilityPolygon.computeViewport = function(position, segments, viewportMinCorner, viewportMaxCorner) {\n\tvar brokenSegments = [];\n\tvar viewport = [[viewportMinCorner[0],viewportMinCorner[1]],[viewportMaxCorner[0],viewportMinCorner[1]],[viewportMaxCorner[0],viewportMaxCorner[1]],[viewportMinCorner[0],viewportMaxCorner[1]]];\n\tfor (var i = 0; i < segments.length; ++i) {\n\t\tif (segments[i][0][0] < viewportMinCorner[0] && segments[i][1][0] < viewportMinCorner[0]) continue;\n\t\tif (segments[i][0][1] < viewportMinCorner[1] && segments[i][1][1] < viewportMinCorner[1]) continue;\n\t\tif (segments[i][0][0] > viewportMaxCorner[0] && segments[i][1][0] > viewportMaxCorner[0]) continue;\n\t\tif (segments[i][0][1] > viewportMaxCorner[1] && segments[i][1][1] > viewportMaxCorner[1]) continue;\n\t\tvar intersections = [];\n\t\tfor (var j = 0; j < viewport.length; ++j) {\n\t\t\tvar k = j + 1;\n\t\t\tif (k == viewport.length) k = 0;\n\t\t\tif (VisibilityPolygon.doLineSegmentsIntersect(segments[i][0][0], segments[i][0][1], segments[i][1][0], segments[i][1][1], viewport[j][0], viewport[j][1], viewport[k][0], viewport[k][1])) {\n\t\t\t\tvar intersect = VisibilityPolygon.intersectLines(segments[i][0], segments[i][1], viewport[j], viewport[k]);\n\t\t\t\tif (intersect.length != 2) continue;\n\t\t\t\tif (VisibilityPolygon.equal(intersect, segments[i][0]) || VisibilityPolygon.equal(intersect, segments[i][1])) continue;\n\t\t\t\tintersections.push(intersect);\n\t\t\t}\n\t\t}\n\t\tvar start = [segments[i][0][0], segments[i][0][1]];\n\t\twhile (intersections.length > 0) {\n\t\t\tvar endIndex = 0;\n\t\t\tvar endDis = VisibilityPolygon.distance(start, intersections[0]);\n\t\t\tfor (var j = 1; j < intersections.length; ++j) {\n\t\t\t\tvar dis = VisibilityPolygon.distance(start, intersections[j]);\n\t\t\t\tif (dis < endDis) {\n\t\t\t\t\tendDis = dis;\n\t\t\t\t\tendIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbrokenSegments.push([[start[0], start[1]], [intersections[endIndex][0], intersections[endIndex][1]]]);\n\t\t\tstart[0] = intersections[endIndex][0];\n\t\t\tstart[1] = intersections[endIndex][1];\n\t\t\tintersections.splice(endIndex, 1);\n\t\t}\n\t\tbrokenSegments.push([start, [segments[i][1][0], segments[i][1][1]]]);\n\t}\n\n\tvar viewportSegments = [];\n\tfor (var i = 0; i < brokenSegments.length; ++i) {\n\t\tif (VisibilityPolygon.inViewport(brokenSegments[i][0], viewportMinCorner, viewportMaxCorner) && VisibilityPolygon.inViewport(brokenSegments[i][1], viewportMinCorner, viewportMaxCorner)) {\n\t\t\tviewportSegments.push([[brokenSegments[i][0][0], brokenSegments[i][0][1]], [brokenSegments[i][1][0], brokenSegments[i][1][1]]]);\n\t\t}\n\t}\n\tvar eps = VisibilityPolygon.epsilon() * 10;\n\tviewportSegments.push([[viewportMinCorner[0]-eps,viewportMinCorner[1]-eps],[viewportMaxCorner[0]+eps,viewportMinCorner[1]-eps]]);\n\tviewportSegments.push([[viewportMaxCorner[0]+eps,viewportMinCorner[1]-eps],[viewportMaxCorner[0]+eps,viewportMaxCorner[1]+eps]]);\n\tviewportSegments.push([[viewportMaxCorner[0]+eps,viewportMaxCorner[1]+eps],[viewportMinCorner[0]-eps,viewportMaxCorner[1]+eps]]);\n\tviewportSegments.push([[viewportMinCorner[0]-eps,viewportMaxCorner[1]+eps],[viewportMinCorner[0]-eps,viewportMinCorner[1]-eps]]);\n\treturn VisibilityPolygon.compute(position, viewportSegments);\n}\n\nVisibilityPolygon.inViewport = function(position, viewportMinCorner, viewportMaxCorner) {\n\tif (position[0] < viewportMinCorner[0] - VisibilityPolygon.epsilon()) return false;\n\tif (position[1] < viewportMinCorner[1] - VisibilityPolygon.epsilon()) return false;\n\tif (position[0] > viewportMaxCorner[0] + VisibilityPolygon.epsilon()) return false;\n\tif (position[1] > viewportMaxCorner[1] + VisibilityPolygon.epsilon()) return false;\n\treturn true;\n}\n\nVisibilityPolygon.inPolygon = function(position, polygon) {\n\tvar val = polygon[0][0];\n\tfor (var i = 0; i < polygon.length; ++i) {\n\t\tval = Math.min(polygon[i][0], val);\n\t\tval = Math.min(polygon[i][1], val);\n\t}\n\tvar edge = [val-1, val-1];\n\tvar parity = 0;\n\tfor (var i = 0; i < polygon.length; ++i) {\n\t\tvar j = i + 1;\n\t\tif (j == polygon.length) j = 0;\n\t\tif (VisibilityPolygon.doLineSegmentsIntersect(edge[0], edge[1], position[0], position[1], polygon[i][0], polygon[i][1], polygon[j][0], polygon[j][1])) {\n\t\t\tvar intersect = VisibilityPolygon.intersectLines(edge, position, polygon[i], polygon[j]);\n\t\t\tif (VisibilityPolygon.equal(position, intersect)) return true;\n\t\t\tif (VisibilityPolygon.equal(intersect, polygon[i])) {\n\t\t\t\tif (VisibilityPolygon.angle2(position, edge, polygon[j]) < 180) ++parity;\n\t\t\t} else if (VisibilityPolygon.equal(intersect, polygon[j])) {\n\t\t\t\tif (VisibilityPolygon.angle2(position, edge, polygon[i]) < 180) ++parity;\n\t\t\t} else {\n\t\t\t\t++parity;\n\t\t\t}\n\t\t}\n\t}\n\treturn (parity%2)!=0;\n};\n\nVisibilityPolygon.convertToSegments = function(polygons) {\n\tvar segments = [];\n\tfor (var i = 0; i < polygons.length; ++i) {\n\t\tfor (var j = 0; j < polygons[i].length; ++j) {\n\t\t\tvar k = j+1;\n\t\t\tif (k == polygons[i].length) k = 0;\n\t\t\tsegments.push([[polygons[i][j][0], polygons[i][j][1]], [polygons[i][k][0], polygons[i][k][1]]]);\n\t\t}\n\t}\n\treturn segments;\n};\n\nVisibilityPolygon.breakIntersections = function(segments) {\n\tvar output = [];\n\tfor (var i = 0; i < segments.length; ++i) {\n\t\tvar intersections = [];\n\t\tfor (var j = 0; j < segments.length; ++j) {\n\t\t\tif (i == j) continue;\n\t\t\tif (VisibilityPolygon.doLineSegmentsIntersect(segments[i][0][0], segments[i][0][1], segments[i][1][0], segments[i][1][1], segments[j][0][0], segments[j][0][1], segments[j][1][0], segments[j][1][1])) {\n\t\t\t\tvar intersect = VisibilityPolygon.intersectLines(segments[i][0], segments[i][1], segments[j][0], segments[j][1]);\n\t\t\t\tif (intersect.length != 2) continue;\n\t\t\t\tif (VisibilityPolygon.equal(intersect, segments[i][0]) || VisibilityPolygon.equal(intersect, segments[i][1])) continue;\n\t\t\t\tintersections.push(intersect);\n\t\t\t}\n\t\t}\n\t\tvar start = [segments[i][0][0], segments[i][0][1]];\n\t\twhile (intersections.length > 0) {\n\t\t\tvar endIndex = 0;\n\t\t\tvar endDis = VisibilityPolygon.distance(start, intersections[0]);\n\t\t\tfor (var j = 1; j < intersections.length; ++j) {\n\t\t\t\tvar dis = VisibilityPolygon.distance(start, intersections[j]);\n\t\t\t\tif (dis < endDis) {\n\t\t\t\t\tendDis = dis;\n\t\t\t\t\tendIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput.push([[start[0], start[1]], [intersections[endIndex][0], intersections[endIndex][1]]]);\n\t\t\tstart[0] = intersections[endIndex][0];\n\t\t\tstart[1] = intersections[endIndex][1];\n\t\t\tintersections.splice(endIndex, 1);\n\t\t}\n\t\toutput.push([start, [segments[i][1][0], segments[i][1][1]]]);\n\t}\n\treturn output;\n};\n\nVisibilityPolygon.epsilon = function() {\n\treturn 0.0000001;\n};\n\nVisibilityPolygon.equal = function(a, b) {\n\tif (Math.abs(a[0] - b[0]) < VisibilityPolygon.epsilon() && Math.abs(a[1] - b[1]) < VisibilityPolygon.epsilon()) return true;\n\treturn false;\n};\n\nVisibilityPolygon.remove = function(index, heap, position, segments, destination, map) {\n\tmap[heap[index]] = -1;\n\tif (index == heap.length - 1) {\n\t\theap.pop();\n\t\treturn;\n\t}\n\theap[index] = heap.pop();\n\tmap[heap[index]] = index;\n\tvar cur = index;\n\tvar parent = VisibilityPolygon.parent(cur);\n\tif (cur != 0 && VisibilityPolygon.lessThan(heap[cur], heap[parent], position, segments, destination)) {\n\t\twhile (cur > 0) {\n\t\t\tvar parent = VisibilityPolygon.parent(cur);\n\t\t\tif (!VisibilityPolygon.lessThan(heap[cur], heap[parent], position, segments, destination)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap[heap[parent]] = cur;\n\t\t\tmap[heap[cur]] = parent;\n\t\t\tvar temp = heap[cur];\n\t\t\theap[cur] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\tcur = parent;\n\t\t}\n\t} else {\n\t\twhile (true) {\n\t\t\tvar left = VisibilityPolygon.child(cur);\n\t\t\tvar right = left + 1;\n\t\t\tif (left < heap.length && VisibilityPolygon.lessThan(heap[left], heap[cur], position, segments, destination) &&\n\t\t\t\t\t(right == heap.length || VisibilityPolygon.lessThan(heap[left], heap[right], position, segments, destination))) {\n\t\t\t\tmap[heap[left]] = cur;\n\t\t\t\tmap[heap[cur]] = left;\n\t\t\t\tvar temp = heap[left];\n\t\t\t\theap[left] = heap[cur];\n\t\t\t\theap[cur] = temp;\n\t\t\t\tcur = left;\n\t\t\t} else if (right < heap.length && VisibilityPolygon.lessThan(heap[right], heap[cur], position, segments, destination)) {\n\t\t\t\tmap[heap[right]] = cur;\n\t\t\t\tmap[heap[cur]] = right;\n\t\t\t\tvar temp = heap[right];\n\t\t\t\theap[right] = heap[cur];\n\t\t\t\theap[cur] = temp;\n\t\t\t\tcur = right;\n\t\t\t} else break;\n\t\t}\n\t}\n};\n\nVisibilityPolygon.insert = function(index, heap, position, segments, destination, map) {\n\tvar intersect = VisibilityPolygon.intersectLines(segments[index][0], segments[index][1], position, destination);\n\tif (intersect.length == 0) return;\n\tvar cur = heap.length;\n\theap.push(index);\n\tmap[index] = cur;\n\twhile (cur > 0) {\n\t\tvar parent = VisibilityPolygon.parent(cur);\n\t\tif (!VisibilityPolygon.lessThan(heap[cur], heap[parent], position, segments, destination)) {\n\t\t\tbreak;\n\t\t}\n\t\tmap[heap[parent]] = cur;\n\t\tmap[heap[cur]] = parent;\n\t\tvar temp = heap[cur];\n\t\theap[cur] = heap[parent];\n\t\theap[parent] = temp;\n\t\tcur = parent;\n\t}\n};\n\nVisibilityPolygon.lessThan = function(index1, index2, position, segments, destination) {\n\tvar inter1 = VisibilityPolygon.intersectLines(segments[index1][0], segments[index1][1], position, destination);\n\tvar inter2 = VisibilityPolygon.intersectLines(segments[index2][0], segments[index2][1], position, destination);\n\tif (!VisibilityPolygon.equal(inter1, inter2)) {\n\t\tvar d1 = VisibilityPolygon.distance(inter1, position);\n\t\tvar d2 = VisibilityPolygon.distance(inter2, position);\n\t\treturn d1 < d2;\n\t}\n\tvar end1 = 0;\n\tif (VisibilityPolygon.equal(inter1, segments[index1][0])) end1 = 1;\n\tvar end2 = 0;\n\tif (VisibilityPolygon.equal(inter2, segments[index2][0])) end2 = 1;\n\tvar a1 = VisibilityPolygon.angle2(segments[index1][end1], inter1, position);\n\tvar a2 = VisibilityPolygon.angle2(segments[index2][end2], inter2, position);\n\tif (a1 < 180) {\n\t\tif (a2 > 180) return true;\n\t\treturn a2 < a1;\n\t}\n\treturn a1 < a2;\n};\n\nVisibilityPolygon.parent = function(index) {\n\treturn Math.floor((index-1)/2);\n};\n\nVisibilityPolygon.child = function(index) {\n\treturn 2*index+1;\n};\n\nVisibilityPolygon.angle2 = function(a, b, c) {\n\tvar a1 = VisibilityPolygon.angle(a,b);\n\tvar a2 = VisibilityPolygon.angle(b,c);\n\tvar a3 = a1 - a2;\n\tif (a3 < 0) a3 += 360;\n\tif (a3 > 360) a3 -= 360;\n\treturn a3;\n};\n\nVisibilityPolygon.sortPoints = function(position, segments) {\n\tvar points = new Array(segments.length * 2);\n\tfor (var i = 0; i < segments.length; ++i) {\n\t\tfor (var j = 0; j < 2; ++j) {\n\t\t\tvar a = VisibilityPolygon.angle(segments[i][j], position);\n\t\t\tpoints[2*i+j] = [i, j, a];\n\t\t}\n\t}\n\tpoints.sort(function(a,b) {return a[2]-b[2];});\n\treturn points;\n};\n\nVisibilityPolygon.angle = function(a, b) {\n\treturn Math.atan2(b[1]-a[1], b[0]-a[0]) * 180 / Math.PI;\n};\n\nVisibilityPolygon.intersectLines = function(a1, a2, b1, b2) {\n\tvar dbx = b2[0] - b1[0];\n\tvar dby = b2[1] - b1[1];\n\tvar dax = a2[0] - a1[0];\n\tvar day = a2[1] - a1[1];\n\t\n\tvar u_b  = dby * dax - dbx * day;\n\tif (u_b != 0) {\n\t\tvar ua = (dbx * (a1[1] - b1[1]) - dby * (a1[0] - b1[0])) / u_b;\n\t\treturn [a1[0] - ua * -dax, a1[1] - ua * -day];\n\t}\n\treturn [];\n};\n\nVisibilityPolygon.distance = function(a, b) {\n\tvar dx = a[0]-b[0];\n\tvar dy = a[1]-b[1];\n\treturn dx*dx + dy*dy;\n};\n\nVisibilityPolygon.isOnSegment = function(xi, yi, xj, yj, xk, yk) {\n  return (xi <= xk || xj <= xk) && (xk <= xi || xk <= xj) &&\n         (yi <= yk || yj <= yk) && (yk <= yi || yk <= yj);\n};\n\nVisibilityPolygon.computeDirection = function(xi, yi, xj, yj, xk, yk) {\n  const a = (xk - xi) * (yj - yi);\n  const b = (xj - xi) * (yk - yi);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\n\nVisibilityPolygon.doLineSegmentsIntersect = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const d1 = VisibilityPolygon.computeDirection(x3, y3, x4, y4, x1, y1);\n  const d2 = VisibilityPolygon.computeDirection(x3, y3, x4, y4, x2, y2);\n  const d3 = VisibilityPolygon.computeDirection(x1, y1, x2, y2, x3, y3);\n  const d4 = VisibilityPolygon.computeDirection(x1, y1, x2, y2, x4, y4);\n  return (((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) &&\n          ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) ||\n         (d1 == 0 && VisibilityPolygon.isOnSegment(x3, y3, x4, y4, x1, y1)) ||\n         (d2 == 0 && VisibilityPolygon.isOnSegment(x3, y3, x4, y4, x2, y2)) ||\n         (d3 == 0 && VisibilityPolygon.isOnSegment(x1, y1, x2, y2, x3, y3)) ||\n         (d4 == 0 && VisibilityPolygon.isOnSegment(x1, y1, x2, y2, x4, y4));\n};\n\nexport default VisibilityPolygon;",
    "import GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\n  constructor() {\n    super(640, 480, Phaser.AUTO, 'content', null);\n    this.state.add('Game', GameState, false);\n    this.state.start('Game');\n  }\n}\n\nnew Game();\n",
    "import VisibilityPolygon from '../external/visibility_polygon_dev';\n\nclass GameState extends Phaser.State {\n\n  constructor() {\n    super();\n    this.obstaclesCanvas = null;\n    this.lightCanvas = null;\n    this.numBoxes = 5;\n    this.polygons = [];\n    this.moveIndex = null;\n  }\n\n  create() {\n    // listener to mouse movement\n    this.moveIndex = this.game.input.addMoveCallback(this.move, this);\n    // the canvas where we will show the obstaclesCanvas\n    this.obstaclesCanvas = this.game.add.graphics(0,0);\n    // line style of obstacle canvas\n    this.obstaclesCanvas.lineStyle(4, 0xffffff, 1);\n    // the canvas where we will display the scene\n    this.lightCanvas = this.game.add.graphics(0,0);\n    // placing some ramdom boxes\n    for(let i = 0; i < this.numBoxes; i++){\n      this.randomBox();\n    }\n    // placing the perimeter box\n    this.polygons.push(\n      [[- 1, - 1],\n      [this.game.width + 1, -1],\n      [this.game.width + 1, this.game.height + 1],\n      [- 1, this.game.height + 1]]\n    );\n  }\n\n  update() {\n  }\n\n  move() {\n    // when the mouse is moved, we determine the new visibility polygon\n    const visibility = this.createLightPolygon(this.game.input.worldX, this.game.input.worldY);\n      // then we draw it\n    this.lightCanvas.clear();\n    this.lightCanvas.lineStyle(2, 0xff8800, 1);\n    this.lightCanvas.beginFill(0xffff00);\n    this.lightCanvas.moveTo(visibility[0][0], visibility[0][1]);\n    for(let i = 1; i <= visibility.length; i++){\n      this.lightCanvas.lineTo(visibility[i % visibility.length][0], visibility[i % visibility.length][1]);\n    }\n    this.lightCanvas.endFill();\n  }\n\n  randomBox() {\n    do {\n      // drawing boxes with random width, height and upper corner coordinates\n      var width = this.game.rnd.between(50, 150);\n      var height = this.game.rnd.between(50, 150);\n      var startX = this.game.rnd.between(10, this.game.width - 160);\n      var startY = this.game.rnd.between(10, this.game.height - 160);\n    } while(this.boxesIntersect(startX, startY, width, height))\n    // drawing the boxes\n    this.obstaclesCanvas.drawRect(startX, startY, width, height);\n    // pushing the newly created box into polygons array\n    this.polygons.push(\n      [[startX, startY],\n      [startX + width, startY],\n      [startX + width, startY + height],\n      [startX, startY + height]]\n    );\n  }\n\n  // this is just a function to prevent boxes to insersect or the library won't work\n  boxesIntersect(x,y,w,h) {\n    for(let i = 0; i < this.polygons.length; i++){\n      if(x < this.polygons[i][1][0] && x + w > this.polygons[i][0][0] && y < this.polygons[i][3][1] && y + h > this.polygons[i][0][1]){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // and this is how the library generates the visibility polygon starting\n  // from an array of polygons and a source point\n  createLightPolygon(x,y){\n    let segments = VisibilityPolygon.convertToSegments(this.polygons);\n    segments = VisibilityPolygon.breakIntersections(segments);\n    const position = [x, y];\n    if (VisibilityPolygon.inPolygon(position, this.polygons[this.polygons.length - 1])) {\n      return VisibilityPolygon.compute(position, segments);\n    }\n    return null;\n  }\n\n}\n\nexport default GameState;\n"
  ]
}