{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/pong/constants.js",
    "src/pong/index.js",
    "src/pong/object/Ball.js",
    "src/pong/object/Hud.js",
    "src/pong/object/Paddle.js",
    "src/pong/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "export const WidthScreen = 800;\nexport const HeightScreen = 600;\nexport const BallStartDelay = 2;\nexport const BallRandomStartingAngleLeft = [-120, 120];\nexport const BallRandomStartingAngleRight = [-60, 60];\nexport const BallVelocity = 400;\nexport const paddleSegmentsMax = 4;\nexport const paddleSegmentHeight = 4;\nexport const paddleSegmentAngle = 15;\nexport const scoreToWin = 11;",
    "import GameState from 'states/GameState';\n\nclass LoadTilemap extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew LoadTilemap();\n",
    "const Radius = 10;\nconst LineWidth = 3;\n\nclass Ball extends Phaser.Sprite {\n\n  constructor(game, x, y, color = '#0000ff', velX, velY) {\n    const bmd = game.add.bitmapData(Radius * 2, Radius * 2);\n    bmd.ctx.beginPath();\n    bmd.ctx.arc(Radius, Radius, Radius - LineWidth, 0, 2 * Math.PI, false);\n    bmd.ctx.fillStyle = 'green';\n    bmd.ctx.fill();\n    bmd.ctx.lineWidth = LineWidth;\n    bmd.ctx.strokeStyle = '#FFFFFF';\n    bmd.ctx.stroke();\n    super(game, x, y, bmd);\n    game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.checkWorldBounds = true;\n    this.body.collideWorldBounds = true;\n    this.anchor.set(0.5, 0.5);\n    this.body.velocity.setTo(velX, velY);\n    this.body.bounce.set(1);\n  }\n\n}\n\nexport default Ball;",
    "import { WidthScreen } from \"../constants.js\";\nconst style = {font: '80px Arial', fill: '#FFFFFF', align: 'center'}\nconst top = 10;\n\nclass Hud extends Phaser.Group {\n\n  constructor(game, scores) {\n    super(game);\n    this.scoreLeft = game.add.text(WidthScreen * 0.25, top, scores[0], style);\n    this.scoreLeft.anchor.set(0.5, 0);\n\n    this.scoreRight = game.add.text(WidthScreen * 0.75, top, scores[1], style);\n    this.scoreRight.anchor.set(0.5, 0);\n\n    this.add(this.scoreRight);\n    this.add(this.scoreLeft);\n  }\n\n  updateTexts(scores) {\n    this.scoreLeft.text = scores[0];\n    this.scoreRight.text = scores[1];\n  }\n\n}\n\nexport default Hud;",
    "const Width = 100;\nconst Height = 20;\nconst LineWidth = 5;\n\nfunction createBmp(game, direction, color) {\n    const bmd = direction === \"horizontal\" ?\n        game.add.bitmapData(Width + 2 * LineWidth, Height + 2 * LineWidth) :\n        game.add.bitmapData(Height + 2 * LineWidth, Width + 2 * LineWidth);\n    bmd.ctx.beginPath();\n    bmd.ctx.lineWidth = LineWidth;\n    bmd.ctx.strokeStyle= \"#FFFFFF\";\n    if (direction === \"horizontal\") {\n        bmd.ctx.rect(LineWidth, LineWidth, Width, Height);\n    } else {\n        bmd.ctx.rect(LineWidth, LineWidth, Height, Width);\n    }\n    bmd.ctx.stroke();\n    bmd.ctx.fillStyle = color;\n    bmd.ctx.fill();\n    return bmd;\n}\n\nclass Paddle extends Phaser.Sprite {\n\n  constructor(game, x, y, orientation = \"horizontal\", color = \"green\") {\n    const bmd = createBmp(game, orientation, color);\n    super(game, x, y, bmd);\n    game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.anchor.set(0.5, 0.5);\n    this.body.immovable = true;\n  }\n}\n\nexport default Paddle;",
    "import Paddle from 'object/Paddle';\nimport Ball from 'object/Ball';\nimport Hud from 'object/Hud';\nimport {\n  WidthScreen,\n  HeightScreen,\n  BallStartDelay,\n  BallRandomStartingAngleLeft,\n  BallRandomStartingAngleRight,\n  BallVelocity,\n  paddleSegmentsMax,\n  paddleSegmentHeight,\n  paddleSegmentAngle,\n  scoreToWin\n} from \"constants.js\";\n\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.stage.backgroundColor = '#182d3b';\n    // Start the Arcade physics system (for movements and collisions)\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    this.orientation = \"vertical\";\n    this.player1Score = 0;\n    this.player2Score = 0;\n    this.initBoundaries();\n    this.initMiddleLine();\n    this.initPaddlesPosition();\n    this.ball = new Ball(this.game, WidthScreen / 2, HeightScreen / 2, - BallVelocity,  - BallVelocity);\n    this.ball.events.onOutOfBounds.add(this.ballOutOfBounds, this);\n    this.game.add.existing(this.ball);\n    this.startDemo();\n\n    this.hud = new Hud(this.game, [this.player1Score, this.player2Score]);\n    this.game.add.existing(this.hud);\n\n    //setInterval(() => { this.rotate();}, 20000);\n\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.qKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Q);\n    this.dKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);\n    this.zKey = this.game.input.keyboard.addKey(Phaser.Keyboard.Z);\n    this.sKey = this.game.input.keyboard.addKey(Phaser.Keyboard.S);\n  }\n\n  initBoundaries() {\n    if(this.orientation === \"horizontal\") {\n      this.game.physics.arcade.checkCollision.left = true;\n      this.game.physics.arcade.checkCollision.right = true;\n      this.game.physics.arcade.checkCollision.up = false;\n      this.game.physics.arcade.checkCollision.down = false;\n    } else {\n      this.game.physics.arcade.checkCollision.left = false;\n      this.game.physics.arcade.checkCollision.right = false;\n      this.game.physics.arcade.checkCollision.up = true;\n      this.game.physics.arcade.checkCollision.down = true;\n    }\n  }\n\n  initPaddlesPosition() {\n    if(this.orientation === \"horizontal\") {\n      this.paddle = new Paddle(this.game, 200, 50, this.orientation);\n      this.paddle2 = new Paddle(this.game, 200, HeightScreen - 50, this.orientation);\n    } else {\n      this.paddle = new Paddle(this.game, 50, 150, this.orientation);\n      this.paddle2 = new Paddle(this.game, WidthScreen - 50, 150, this.orientation);\n    }\n\n    this.game.add.existing(this.paddle);\n    this.game.add.existing(this.paddle2);\n\n    this.paddle.body.collideWorldBounds = true;\n    this.paddle2.body.collideWorldBounds = true;\n  }\n\n  initMiddleLine() {\n    this.backgroundGraphics = this.game.add.graphics(0, 0);\n    this.backgroundGraphics.lineStyle(2, 0xFFFFFF, 1);\n    if(this.orientation === \"horizontal\") {\n      for (var x = 0; x < WidthScreen; x += 5 * 2) {\n        this.backgroundGraphics.moveTo(x, this.game.world.centerY);\n        this.backgroundGraphics.lineTo(x + 5, this.game.world.centerY);\n      }\n    } else {\n      for (var y = 0; y < HeightScreen; y += 5 * 2) {\n        this.backgroundGraphics.moveTo(this.game.world.centerX, y);\n        this.backgroundGraphics.lineTo(this.game.world.centerX, y + 5);\n      }\n    }\n  }\n\n  update() {\n    this.handleInput();\n    this.game.physics.arcade.collide(this.ball, this.paddle, null, this.updateBall, this);\n    this.game.physics.arcade.collide(this.ball, this.paddle2, null, this.updateBall, this);\n\n  }\n\n  updateBall(ball, paddle) {\n    let returnAngle = 0;\n    const direction = this.orientation === \"vertical\" ? \"y\" : \"x\";\n    let segmentHit = Math.floor( (ball[direction] - paddle[direction]) / paddleSegmentHeight);\n\n    if (segmentHit >= paddleSegmentsMax) {\n      segmentHit = paddleSegmentsMax - 1;\n    } else if (segmentHit <= -paddleSegmentsMax) {\n      segmentHit = -(paddleSegmentsMax - 1);\n    }\n\n    if(this.orientation === \"vertical\") {\n      console.log(segmentHit)\n      //right paddle\n      if (paddle.x > WidthScreen * 0.5) {\n        returnAngle = segmentHit * paddleSegmentAngle;\n        this.game.physics.arcade.velocityFromAngle(returnAngle, BallVelocity, this.ball.body.velocity);\n      } else {\n        returnAngle = 180 - (segmentHit * paddleSegmentAngle);\n        if (returnAngle > 180) {\n            returnAngle -= 360;\n        }\n        this.game.physics.arcade.velocityFromAngle(returnAngle, BallVelocity, this.ball.body.velocity);\n      }\n    } else { // horizontal\n      // upper paddle\n      if (paddle.y < HeightScreen * 0.5) {\n        returnAngle = -90 + segmentHit * paddleSegmentAngle;\n        this.game.physics.arcade.velocityFromAngle(returnAngle, BallVelocity, this.ball.body.velocity);\n      } else {\n        returnAngle = 90 - (segmentHit * paddleSegmentAngle);\n        this.game.physics.arcade.velocityFromAngle(returnAngle, BallVelocity, this.ball.body.velocity);\n      }\n    }\n  }\n\n  startDemo() {\n    this.ball.visible = false;\n    this.game.time.events.add(Phaser.Timer.SECOND * BallStartDelay, this.startBall, this);\n  }\n\n  startBall() {\n    this.ball.visible = true;\n    this.ball.position.set( WidthScreen / 2, HeightScreen / 2);\n    const randomAngle = this.game.rnd.pick(BallRandomStartingAngleRight.concat(BallRandomStartingAngleLeft));\n    this.game.physics.arcade.velocityFromAngle(randomAngle, BallVelocity, this.ball.body.velocity);\n  }\n\n  rotate() {\n    this.paddle.kill();\n    this.paddle2.kill();\n    this.backgroundGraphics.destroy();\n    //remove old element\n\n    this.orientation = this.orientation === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    this.initMiddleLine();\n    this.initPaddlesPosition();\n    this.initBoundaries();\n  }\n\n  handleInput() {\n    this.paddle.body.velocity.x = 0;\n    this.paddle.body.velocity.y = 0;\n    this.paddle2.body.velocity.x = 0;\n    this.paddle2.body.velocity.y = 0;\n\n    if(this.orientation === \"horizontal\") {\n      if (this.cursors.left.isDown)\n      {\n          this.paddle.body.velocity.x = -500;\n      }\n      else if (this.cursors.right.isDown)\n      {\n          this.paddle.body.velocity.x= 500;\n      }\n\n      if (this.qKey.isDown)\n      {\n          this.paddle2.body.velocity.x = -500;\n      }\n      else if (this.dKey.isDown)\n      {\n          this.paddle2.body.velocity.x = 500;\n      }\n    } else {\n      if (this.zKey.isDown)\n      {\n          this.paddle2.body.velocity.y = -500;\n      }\n      else if (this.sKey.isDown)\n      {\n          this.paddle2.body.velocity.y= 500;\n      }\n\n      if (this.cursors.up.isDown)\n      {\n          this.paddle.body.velocity.y = -500;\n      }\n      else if (this.cursors.down.isDown)\n      {\n          this.paddle.body.velocity.y = 500;\n      }\n    }\n  }\n\n  ballOutOfBounds() {\n    this.game.time.events.add(Phaser.Timer.SECOND, this.startBall, this);\n    const axis = this.orientation === \"horizontal\" ? \"y\" : \"x\";\n     if (this.ball[axis] < 0) {\n      this.player2Score++;\n    } else {\n      this.player1Score++;\n    }\n    this.hud.updateTexts([this.player1Score, this.player2Score]);\n  }\n\n}\n\nexport default GameState;\n"
  ]
}