{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\flappy-bird\\index.js",
    "src\\flappy-bird\\object\\Bird.js",
    "src\\flappy-bird\\object\\Pipes.js",
    "src\\flappy-bird\\object\\ScoreManager.js",
    "src\\flappy-bird\\states\\GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import GameState from 'states/GameState';\n\nclass FlappyBird extends Phaser.Game {\n\n  constructor() {\n    super(640, 960, Phaser.AUTO, 'content', null);\n    this.transparent = true;\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n\n  restart() {\n    this.state.start('GameState');\n  }\n}\nnew FlappyBird();\n",
    "class Bird extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    this.width = this.width / 6.5;\n    this.height = this.height / 6.5;\n    this.y = game.height / 2 - this.height / 2;\n\n    this.game = game;\n\n    //Enable physics on the player\n    game.physics.arcade.enable(this);\n    //no rebound after colission\n    this.body.bounce.x = this.body.bounce.y = 0;\n    //rotation in the center\n    this.anchor.setTo(0.5, 0.5);\n    this.birdInJump = false;\n\n    // this.body.setPolygon(\n    //               39, 129,\n    //               127, 42,\n    //               188, 0,\n    //               365, 0,\n    //               425, 105,\n    //               436, 176,\n    //               463, 182,\n    //               495, 219,\n    //               430, 315,\n    //               285, 345,\n    //               152, 341,\n    //               6, 228\n    // );\n    this.birdRotatePolygon = 0;\n\n    // On ajoute l'animation qui va permettre à l'oiseau de flotter dans les airs\n    this.tweenFlap = game.add.tween(this);\n    this.tweenFlap.to({ y: this.y + 20}, 400, Phaser.Easing.Quadratic.InOut, true, 0, 10000000000, true);\n    // On ajoute l'animation du battement des ailes, animation contenu dans le JSON\n    this.animations.add('fly');\n    // On fait démarrer l'animation, avec 8 images par seconde et répétée en boucle\n    this.animations.play('fly', 8, true);\n  }\n\n\n\n  onStart() {\n    // Gravité de l'oiseau\n    this.body.gravity.y = 2000;\n    // Premier saut\n    this.body.velocity.y = -600;\n    // On note que l'oiseau est dans l'action jump\n    this.birdInJump = true;\n\n    this.rotation = -Math.PI / 8;\n    this.body.rotation = -Math.PI / 8;\n    this.birdRotatePolygon = -Math.PI / 8;\n\n    this.tweenFlap.stop();\n    this.animations.stop('fly');\n    this.animations.play('fly', 15, true);\n  }\n\n  jump() {\n    if(this.y >= 0) {\n      this.birdInJump = true;\n      this.body.velocity.y = -600;\n\n      if(this.tweenFall != null) {\n        this.tweenFall.stop();\n      }\n      this.rotation = -Math.PI / 8;\n      this.tweenJump = this.game.add.tween(this);\n      this.tweenJump.to({rotation: -Math.PI / 8}, 70, Phaser.Easing.Quadratic.In, true, 0, 0, true);\n      this.animations.play('fly');\n      this.animations.frame = 0;\n    }\n  }\n\n  update() {\n    if(this.body.velocity.y > 0 && this.birdInJump) {\n      this.birdInJump = false;\n\n      if(this.tweenJump != null){\n        this.tweenJump.stop();\n      }\n      this.tweenFall = this.game.add.tween(this);\n      this.tweenFall.to({rotation: Math.PI / 2}, 300, Phaser.Easing.Quadratic.In, true, 200, 0, true);\n\n      this.tweenFall.onStart.add(function() {\n        this.animations.stop('fly');\n        this.animations.frame = 1;\n      }.bind(this));\n\n      this.body.rotation = (this.rotation - this.birdRotatePolygon);\n      this.birdRotatePolygon += this.rotation - this.birdRotatePolygon;\n    }\n  }\n}\n\nexport default Bird;",
    "class Pipes {\n\n  constructor(game) {\n    this.pipes = game.add.group();\n    this.pipes.enableBody = true;\n    this.pipes.createMultiple(40, 'pipe');\n\n    this.pipesEndTop = game.add.group();\n    this.pipesEndTop.enableBody = true;\n    this.pipesEndTop.createMultiple(4, 'pipeEndTop');\n\n    this.pipesEndBottom = game.add.group();\n    this.pipesEndBottom.enableBody = true;\n    this.pipesEndBottom.createMultiple(4, 'pipeEndBottom');\n\n    this.pipesToCheckForScore = new Array();\n    this.pipesToCheckForAdd = new Array();\n  }\n\n  update(game, ground, scoreManager) {\n    if(this.pipesToCheckForAdd.length != 0 && this.pipesToCheckForAdd[0].x + this.pipesToCheckForAdd[0].width / 2 < game.world.width / 2) {\n      this.pipesToCheckForAdd.splice(0, 1);\n      this.addGroupPipes(game, ground);\n      scoreManager.updateScore();\n    }\n  }\n\n  addGroupPipes(game, ground) {\n    const nbPiecesOfPipes = 12;\n    const hole = Math.round(Math.random() * (nbPiecesOfPipes - 7)) + 3;\n\n    for (var i = 0; i <= nbPiecesOfPipes; i++)\n      if (i > hole + 1 || i < hole - 1) {\n        this.addPieceOfPipe(game.world.width, game.world.height - ground.height - i * game.world.height / nbPiecesOfPipes, i, hole);\n      }\n  }\n\n  getFirstAvailable(collection) {\n    let available = collection.getFirstDead();\n     if(!available) {\n      available = collection.children.find(item =>{\n        return item.x < 0;\n      });\n    }\n    return available;\n  }\n\n  addPieceOfPipe(x, y, i, hole, nbPipe) {\n    if(i == hole + 2 || i == hole - 2) {\n      const yDiff = 15;\n      let pipeEnd;\n      let yPipe;\n\n      if(i == hole + 2) {\n        pipeEnd = this.getFirstAvailable(this.pipesEndTop);\n        yPipe = y + yDiff;\n      } else {\n        pipeEnd = this.getFirstAvailable(this.pipesEndBottom);\n        yPipe = y - yDiff;\n      }\n      pipeEnd.reset(x - 4, yPipe);\n      pipeEnd.body.velocity.x = -250;\n      pipeEnd.outOfBoundsKill = true;\n      pipeEnd.body.immovable = true;\n    }\n\n    let pipe = this.getFirstAvailable(this.pipes);\n    pipe.reset(x, y);\n    pipe.body.velocity.x = -250;\n    pipe.outOfBoundsKill = true;\n    pipe.body.immovable = true;\n\n    if(i == 0) {\n      this.pipesToCheckForScore.push(pipe);\n      this.pipesToCheckForAdd.push(pipe);\n    }\n  }\n\n}\n\nexport default Pipes;",
    "class ScoreManager {\n\n  constructor(game) {\n    this.score = 0;\n    this.posi\n    this.scoreText = game.add.text(0, 100, \"0\", { font: \"60px Arial\", fill: \"#ffffff\" });\n    // On replace le score au centre de l'écran\n    this.scoreText.x = game.width / 2 - this.scoreText.width / 2;\n  }\n\n\n  updateScore() {\n    this.score++;\n    this.scoreText.text = this.score;\n  }\n\n}\n\nexport default ScoreManager;\n",
    "import Bird from 'object/Bird';\nimport Pipes from 'object/Pipes';\nimport ScoreManager from 'object/ScoreManager';\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.background = this.game.add.sprite(0, 0, 'background');\n    this.background.width = this.game.width;\n    this.background.height = this.game.height;\n\n    this.pipeManager = new Pipes(this.game);\n\n    this.ground = this.game.add.sprite(0, 0, 'ground');\n    this.ground.width = this.game.width * 2;\n    this.ground.y = this.game.height - this.ground.height;\n    this.game.physics.arcade.enable(this.ground);\n    this.ground.body.velocity.x = -250;\n\n    this.bird =  new Bird(this.game, 200, 0, 'bird');\n    this.game.add.existing(this.bird);\n    this.game.input.onTap.add(this.start, this);\n\n    this.scoreManager = new ScoreManager(this.game);\n  }\n\n  preload() {\n    this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n    this.game.load.atlasJSONHash('bird', 'res/bird.png', 'res/bird.json');\n    // background\n    this.game.load.image('background', 'res/background.png');\n    this.game.load.image('ground', 'res/ground.png');\n    //pipe\n    this.game.load.image('pipe', 'res/pipe.png');\n    this.game.load.image('pipeEndTop', 'res/pipe-end-top.png');\n    this.game.load.image('pipeEndBottom', 'res/pipe-end-bottom.png');\n  }\n\n  update() {\n    this.colissionDetection();\n    this.pipeManager.update(this.game, this.ground, this.scoreManager);\n    if(this.ground.x + this.ground.width / 2 <= 0) {\n      this.ground.x = 0;\n    }\n    this.bird.update();\n  }\n\n  start() {\n    this.bird.onStart();\n    this.game.input.onTap.removeAll();\n    this.game.input.onDown.add(this.bird.jump, this.bird);\n    const fn = () => { this.pipeManager.addGroupPipes(this.game, this.ground) };\n    setTimeout(fn, 1500);\n\n  }\n\n  colissionDetection() {\n    this.game.physics.arcade.collide(this.bird, this.ground, this.game.restart, null, this.game);\n    this.game.physics.arcade.collide(this.bird, this.pipeManager.pipes, this.game.restart, null, this.game);\n    this.game.physics.arcade.collide(this.bird, this.pipeManager.pipesEndTop, this.game.restart, null, this.game);\n    this.game.physics.arcade.collide(this.bird, this.pipeManager.pipesEndBottom, this.game.restart, null, this.game);\n  }\n\n  // render() {\n  //   this.game.debug.body(this.bird);\n  // }\n\n}\n\nexport default GameState;"
  ]
}